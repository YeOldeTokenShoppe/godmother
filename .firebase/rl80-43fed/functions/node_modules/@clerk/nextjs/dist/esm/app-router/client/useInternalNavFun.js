import { usePathname } from "next/navigation";
import { useCallback, useEffect, useTransition } from "react";
const useInternalNavFun = (props) => {
  const { windowNav, routerNav } = props;
  const pathname = usePathname();
  const [isPending, startTransition] = useTransition();
  if (windowNav) {
    window.__clerk_internal_navFun = (to, opts) => {
      return new Promise((res) => {
        if (!window.__clerk_internal_navPromisesBuffer) {
          window.__clerk_internal_navPromisesBuffer = [];
        }
        window.__clerk_internal_navPromisesBuffer.push(res);
        startTransition(() => {
          var _a, _b, _c;
          if (((_a = opts == null ? void 0 : opts.__internal_metadata) == null ? void 0 : _a.navigationType) === "internal") {
            const state = ((_c = (_b = window.next) == null ? void 0 : _b.version) != null ? _c : "") < "14.1.0" ? history.state : null;
            windowNav(state, "", to);
          } else {
            routerNav(to);
          }
        });
      });
    };
  }
  const flushPromises = () => {
    var _a;
    (_a = window.__clerk_internal_navPromisesBuffer) == null ? void 0 : _a.forEach((resolve) => resolve());
    window.__clerk_internal_navPromisesBuffer = [];
  };
  useEffect(() => {
    flushPromises();
    return flushPromises;
  }, []);
  useEffect(() => {
    if (!isPending) {
      flushPromises();
    }
  }, [pathname, isPending]);
  return useCallback((to) => {
    return window.__clerk_internal_navFun(to);
  }, []);
};
export {
  useInternalNavFun
};
//# sourceMappingURL=useInternalNavFun.js.map