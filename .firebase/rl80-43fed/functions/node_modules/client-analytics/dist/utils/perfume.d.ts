type IVitalsScore = 'good' | 'needsImprovement' | 'poor' | null;
interface IPerfumeNavigationTiming {
    fetchTime?: number;
    workerTime?: number;
    totalTime?: number;
    downloadTime?: number;
    timeToFirstByte?: number;
    headerSize?: number;
    dnsLookupTime?: number;
    redirectTime?: number;
}
type EffectiveConnectionType = '2g' | '3g' | '4g' | 'slow-2g' | 'lte';
interface IPerfumeNetworkInformation {
    downlink?: number;
    effectiveType?: EffectiveConnectionType;
    onchange?: () => void;
    rtt?: number;
    saveData?: boolean;
}
type IPerfumeData = number | IPerfumeNavigationTiming | IPerfumeNetworkInformation;
interface INavigatorInfo {
    deviceMemory?: number;
    hardwareConcurrency?: number;
    isLowEndDevice?: boolean;
    isLowEndExperience?: boolean;
    serviceWorkerStatus?: 'controlled' | 'supported' | 'unsupported';
}
export type IAnalyticsTrackerOptions = {
    attribution: {
        performanceEntry?: Record<string, any>;
        category?: string;
        stepName?: string;
    };
    data: IPerfumeData;
    metricName: string;
    navigatorInformation: INavigatorInfo;
    rating: IVitalsScore;
};
/**
 * Helper method to define Perfume.js configs and the analyticsTracker
 */
export declare const getPerfumeOptions: () => {
    analyticsTracker: (options: IAnalyticsTrackerOptions) => void;
    maxMeasureTime: number;
};
/**
 * markNTBT is used to initiate Navigation Total Blocking Time from perfume.js
 */
export declare const markNTBT: () => void;
/**
 * Initiate field data for performance metrics
 * Docs: https://github.com/Zizzamia/perfume.js
 */
export declare const initPerfMonitoring: () => void;
export {};
