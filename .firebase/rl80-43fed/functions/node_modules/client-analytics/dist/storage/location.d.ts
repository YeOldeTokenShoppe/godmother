import { SetLocation, Breadcrumb, UAAData, ReferrerData, Location, PageviewConfig, History, LogPageViewOptions, LocationHistoryTracking } from '../types/location';
export declare const DEFAULT_LOCATION: Location;
export declare function setBreadcrumbs(breadcrumbs: Breadcrumb[]): void;
export declare function setPageviewConfig(pageviewConfig: PageviewConfig): void;
export declare function setLocation(data: SetLocation): void;
export declare const getUrlParams: () => string;
export declare const getUrlPathname: () => string;
export declare const getUrlHostname: () => string;
export declare function getDocumentReferrer(): string;
export declare const getPagePath: () => string;
/**
 * Sets a new pagePath when the location.pathname or location.search changes.
 * Have unique pagePath based on query params is critical to allow web experiences
 * doing what they do best, have statless content based on the complete web URL.
 */
export declare const setPagePath: () => void;
/**
 * Defines which page was previously visited,
 * and if the users come from the Monorail, we can detect it by its referrer value.
 */
export declare const setPrevPagePath: () => void;
export declare const getPageviewProperties: (location: Location) => Record<string, string | null>;
export declare const persistentUAAData: () => UAAData;
export declare const uaaValuesFromUrl: () => UAAData;
/**
 * Parse the domain from referrer info.
 * It keeps subdomain referres but removes
 * the ones from the same hostname
 */
export declare const getReferrerData: () => ReferrerData;
export declare function trackPageView(options?: LogPageViewOptions): void;
export declare const setLocationHistory: (history: History) => void;
export declare const setLocationTracking: (options: LocationHistoryTracking) => void;
export declare const createLocation: () => Location;
