var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AuthImpl_1;
import { WalletsImpl } from "../wallets/wallets.js";
import { StaticImplements } from "../utils.js";
import { UserType } from "./util.js";
import { DelegatedAuthProvider } from "./method/delegated.js";
import { EndUserAuthProvider } from "./method/eua.js";
import { LocalStoragePersistenceStrategy } from "./persistence/localStorage.js";
let AuthImpl = class AuthImpl {
    static { AuthImpl_1 = this; }
    static hostname;
    static verbose;
    static provider;
    static projectId;
    static persistenceStrategy;
    static user;
    static get api() {
        if (!this.provider) {
            throw new Error("Tried to access logged in session before logging in.");
        }
        return this.provider.api;
    }
    static async setup(options) {
        const { hostname, projectId } = options;
        const verbose = options.verbose ?? false;
        AuthImpl_1.hostname = hostname;
        AuthImpl_1.verbose = verbose;
        AuthImpl_1.projectId = projectId;
        AuthImpl_1.provider = undefined;
        AuthImpl_1.user = undefined;
        AuthImpl_1.persistenceStrategy = new LocalStoragePersistenceStrategy();
    }
    static async maybeRefresh(force) {
        await this.provider.maybeRefresh(force);
    }
    static async login(options) {
        if (options?.provideAuthToken) {
            this.provider = new DelegatedAuthProvider({
                hostname: this.hostname,
                verbose: this.verbose,
                persistenceStrategy: this.persistenceStrategy,
                provideAuthToken: options.provideAuthToken,
            });
        }
        else {
            this.provider = new EndUserAuthProvider({
                hostname: this.hostname,
                verbose: this.verbose,
                persistenceStrategy: this.persistenceStrategy,
                projectId: this.projectId,
            });
        }
        await this.provider.login();
        return await this.resumeUser();
    }
    static async resume() {
        const authData = this.persistenceStrategy.get();
        if (!authData?.contents) {
            return;
        }
        if (authData?.contents?.userType !== UserType.EndUserAuth) {
            return;
        }
        this.provider = new EndUserAuthProvider({
            hostname: this.hostname,
            verbose: this.verbose,
            persistenceStrategy: this.persistenceStrategy,
            projectId: this.projectId,
        });
        try {
            await this.provider.refresh();
        }
        catch {
            this.provider.logout();
            return;
        }
        await this.resumeUser();
    }
    static async resumeUser() {
        if (!this.provider) {
            throw new Error("Cannot resume a user without a provider.");
        }
        if (!this.provider.endUserId) {
            throw new Error("Cannot resume a user without an end user ID.");
        }
        const user = { type: this.provider.type, id: this.provider.endUserId, hasWallet: false };
        this.user = user;
        try {
            await WalletsImpl.resume(user);
        }
        catch { }
        return user;
    }
    static async logout() {
        if (!this.provider) {
            this.persistenceStrategy?.clear();
            return;
        }
        return await this.provider.logout();
    }
};
AuthImpl = AuthImpl_1 = __decorate([
    StaticImplements()
], AuthImpl);
export { AuthImpl };
