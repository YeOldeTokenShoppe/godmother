import { AuthMethod } from "../authMethod.js";
import { UserType, parseEncodedAuthToken } from "../util.js";
export class DelegatedAuthProvider extends AuthMethod {
    type = UserType.DevDelegatedAuth;
    provideAuthToken;
    constructor(options) {
        super(options);
        this.provideAuthToken = options.provideAuthToken;
    }
    async login() {
        await this.fetchAndUpdateToken();
    }
    async refresh() {
        await this.fetchAndUpdateToken();
    }
    async fetchAndUpdateToken() {
        let authToken;
        try {
            authToken = await this.provideAuthToken();
        }
        catch (e) {
            if (this.verbose) {
                console.error(`Waas failed to fetch auth token: ${e.message}`);
            }
            throw new Error("Failed to fetch auth token", { cause: e });
        }
        try {
            this.setAuthToken(parseEncodedAuthToken(authToken));
        }
        catch (e) {
            if (this.verbose) {
                console.error(`Waas failed to parse auth token: ${e.message}`);
            }
            throw e;
        }
    }
}
