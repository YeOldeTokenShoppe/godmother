const AUTH_TOKEN_KEY = "CB_WAAS_AUTH_TOKEN";
const VALID_UNTIL_KEY = "CB_WAAS_VALID_UNTIL";
export class LocalStoragePersistenceStrategy {
    token;
    validUntil;
    constructor() { }
    get() {
        try {
            const tokenString = localStorage.getItem(AUTH_TOKEN_KEY);
            const validUntilString = localStorage.getItem(VALID_UNTIL_KEY);
            if (tokenString && validUntilString) {
                const token = JSON.parse(tokenString);
                const validUntilTimestamp = parseInt(validUntilString, 10);
                const validUntil = new Date(validUntilTimestamp);
                if (new Date() < validUntil) {
                    return {
                        contents: token,
                        validUntil: validUntil,
                    };
                }
            }
        }
        catch (e) {
            console.error("Error getting token from local storage", e);
        }
        return undefined;
    }
    update(token, ttlS) {
        localStorage.setItem(AUTH_TOKEN_KEY, JSON.stringify(token));
        const validUntil = new Date(Date.now() + ttlS * 1000).getTime();
        localStorage.setItem(VALID_UNTIL_KEY, validUntil.toString());
    }
    clear() {
        localStorage.removeItem(AUTH_TOKEN_KEY);
        localStorage.removeItem(VALID_UNTIL_KEY);
    }
}
