import { UserType, TAuthToken } from "./util.js";
import { Api } from "../api.js";
import { TokenPersistenceStrategy } from "./persistence/persistenceStrategy.js";
export type TBaseOptions = {
    hostname: string;
    verbose?: boolean;
    persistenceStrategy?: TokenPersistenceStrategy;
};
export declare abstract class AuthMethod {
    abstract type: UserType;
    abstract login(): Promise<void>;
    abstract refresh(): Promise<void>;
    api?: Api;
    hostname: string;
    validUntilMs: number;
    verbose: boolean;
    persistence: TokenPersistenceStrategy;
    authToken?: string;
    refreshToken?: string;
    endUserId?: string;
    constructor(options: TBaseOptions);
    maybeRefresh(force?: boolean): Promise<void>;
    logout(): Promise<void>;
    protected setAuthToken(token: TAuthToken, validUntil?: number): void;
}
