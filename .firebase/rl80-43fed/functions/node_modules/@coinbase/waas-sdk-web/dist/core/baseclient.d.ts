import { HttpRequestHandler } from "./http.js";
export type TOptions = {
    hostname: string;
    verbose: boolean;
    onAuthExpired?: () => Promise<void>;
    authToken: string;
};
export interface Reauthable {
    readonly onAuthExpired?: () => Promise<void>;
}
export declare abstract class BaseClient implements Reauthable {
    hostname: string;
    verbose: boolean;
    correlationId?: string;
    authToken: string;
    protected abstract path: string;
    readonly onAuthExpired?: () => Promise<void>;
    constructor(options: TOptions);
    withCorrelationId(correlationId: string): this;
    get fullyQualifiedPath(): string;
    getHandler(): HttpRequestHandler;
}
export declare function retryable<T extends Reauthable>(): (_target: T, _propertyKey: string, descriptor: TypedPropertyDescriptor<any>) => TypedPropertyDescriptor<any>;
