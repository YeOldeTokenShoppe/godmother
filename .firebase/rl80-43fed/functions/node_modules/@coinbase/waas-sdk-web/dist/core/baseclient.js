import { HttpRequestHandler } from "./http.js";
const MAX_RETRIES = 3;
export class BaseClient {
    hostname;
    verbose;
    correlationId;
    authToken;
    onAuthExpired;
    constructor(options) {
        this.hostname = options.hostname;
        this.verbose = options.verbose;
        this.onAuthExpired = options.onAuthExpired;
        this.authToken = options.authToken;
    }
    withCorrelationId(correlationId) {
        this.correlationId = correlationId;
        return this;
    }
    get fullyQualifiedPath() {
        return this.hostname + this.path;
    }
    getHandler() {
        return new HttpRequestHandler(this.fullyQualifiedPath, this.authToken, this.verbose, this.correlationId);
    }
}
export function retryable() {
    return function (_target, _propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            const instance = this;
            for (let i = 0; i < MAX_RETRIES; i++) {
                try {
                    return await originalMethod.apply(this, args);
                }
                catch (e) {
                    if (e.cause?.status === 401 && instance.onAuthExpired) {
                        await instance.onAuthExpired();
                    }
                    else {
                        throw e;
                    }
                }
            }
            throw new Error("Max retries reached. Unable to complete request.");
        };
        return descriptor;
    };
}
