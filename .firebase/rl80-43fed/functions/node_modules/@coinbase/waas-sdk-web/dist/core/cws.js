var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import * as CWS from "../generated/coinbase/cloud/wallets/consumer/v1/index.js";
import { ProtocolFamily } from "../networks.js";
import { retryable, BaseClient } from "./baseclient.js";
export class WaasCWS extends BaseClient {
    path = "consumer/wallets";
    async generateAddress(keyContainerRootId, keyContainerObjectId, bip32XpubKey, bip32AccountPubKey, bip32XpubKeyAttestation, bip32FullDerivationPath, reinitializationMetadata, protocolFamily = ProtocolFamily.EVM) {
        const generateAddressRequest = {
            protocolFamily: protocolFamily,
            keyContainerRootId: keyContainerRootId,
            keyContainerObjectId: keyContainerObjectId,
            bip32XpubKey: bip32XpubKey,
            bip32AccountPubKey: bip32AccountPubKey,
            bip32XpubKeyAttestation: bip32XpubKeyAttestation,
            bip32FullDerivationPath: bip32FullDerivationPath,
            reinitializationMetadata,
        };
        return await this.getClient().GenerateAddress(generateAddressRequest);
    }
    async listAddresses(parent, protocolFamily = ProtocolFamily.EVM, pageToken, pageSize) {
        const listAddressesRequest = {
            protocolFamily: protocolFamily,
            parent: parent,
            pageToken: pageToken,
            pageSize: pageSize,
        };
        return await this.getClient().ListAddresses(listAddressesRequest);
    }
    async getWallet() {
        return await this.getClient().GetWallet({ includeAddresses: false });
    }
    getClient() {
        const handler = this.getHandler();
        return CWS.createConsumerWalletServiceClient(handler.requestHandler);
    }
    async updateWalletReinitMetadata(wallet) {
        const updateWalletReinitMetadataRequest = {
            name: wallet.name,
            reinitializationMetadata: wallet.reinitializationMetadata,
        };
        return await this.getClient().UpdateWalletReinitMetadata(updateWalletReinitMetadataRequest);
    }
}
__decorate([
    retryable()
], WaasCWS.prototype, "generateAddress", null);
__decorate([
    retryable()
], WaasCWS.prototype, "listAddresses", null);
__decorate([
    retryable()
], WaasCWS.prototype, "getWallet", null);
__decorate([
    retryable()
], WaasCWS.prototype, "updateWalletReinitMetadata", null);
