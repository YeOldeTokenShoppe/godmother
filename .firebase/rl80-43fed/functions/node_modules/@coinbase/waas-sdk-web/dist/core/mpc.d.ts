import { BackupData, ExtendedPrivateKey, PasscodePrompt, PrivateKeyFormat, RawPrivateKey } from "../index.js";
export declare const MPC_NO_ERROR = "null";
export declare const EVM_PATH_PREFIX = "44'/60'/0'/0/";
export declare const EVM_PATH_INDEX_0 = "44'/60'/0'/0/0";
export type PubKeyInfo = {
    fullDerivationPath: string;
    pubKey: string;
    xpub: string;
    attestation: string;
    rootContainerID: string;
    rootKeyObjectID: string;
};
export type SignedMessage = {
    keyPath: string;
    signature: string;
    recoveryCode: string;
    r: `0x${string}`;
    s: `0x${string}`;
    v: number;
};
export type SignatureResp = {
    SignaturesData: SignedMessage[];
    rootContainerID: string;
    rootKeyObjectID: string;
};
export declare function createMPCWallet(authData: string, passcode?: string): Promise<BackupData>;
export declare function restoreMPCWallet(authData: string, passcode: string | undefined, backup: BackupData): Promise<void>;
export declare function getMPCPublicKeyInfo(authData: string, fullPaths: string): Promise<PubKeyInfo>;
export declare function getMPCPublicKeyAttestation(authData: string, fullPath: string): Promise<string>;
export declare function doesContainerExist(): Promise<boolean>;
export declare function finalize(): Promise<void>;
export declare function validateMPCPasscode(authData: string, passcode: string): Promise<PasscodePrompt>;
export declare function changeMPCPasscode(authData: string, currentPasscode: string, newPasscode: string): Promise<PasscodePrompt>;
export type SignHashRequest = {
    keyPath: string;
    hash: number[];
};
export declare function signHashes(authData: string, ...requests: SignHashRequest[]): Promise<SignedMessage>;
export declare function exportMPCKeys(authData: string, backup: string, passcode: string, fullPath: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey | RawPrivateKey>;
