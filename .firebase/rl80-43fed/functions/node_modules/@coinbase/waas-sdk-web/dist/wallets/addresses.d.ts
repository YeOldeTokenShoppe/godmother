import { Address, Signature, HasApi, ProtocolFamily, IProtocolFamily, ExtendedPrivateKey, PrivateKeyFormat, RawPrivateKey } from "../index.js";
import * as CWS from "../generated/coinbase/cloud/wallets/consumer/v1/index.js";
type FullDerivationPath = string;
export declare class AddressesImpl {
    static apiProvider: HasApi;
    static _rootContainerID: string;
    static _addressIndex: number;
    static _addresses: Map<FullDerivationPath, AddressImpl<ProtocolFamily>>;
    static get api(): import("../api.js").Api;
    static initialize(api: HasApi, rootContainerID: string): void;
    static finalize(): void;
    static for<T extends IProtocolFamily>(protocolSpecifier: T, index?: number): Promise<Address<T>>;
    static all(): Promise<Address<IProtocolFamily>[]>;
    static lock: Promise<unknown>;
    static newAddress(protocolFamily: ProtocolFamily): Promise<Address<ProtocolFamily>>;
    static getAddress<T extends ProtocolFamily>(protocolFamily: T, addressIndex: number, walletBackupData?: CWS.ReinitializationMetadata): Promise<AddressImpl<T>>;
    static exportKeys(backup: string, passcode?: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey[] | RawPrivateKey[]>;
    static exportKeysFromHostedBackup(passcode?: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey[] | RawPrivateKey[]>;
    private static syncAddresses;
}
export declare class AddressImpl<P extends IProtocolFamily> implements Address<P> {
    #private;
    readonly protocolFamily: P;
    readonly fullPath: string;
    readonly address: `0x${string}`;
    constructor(apiSource: HasApi, protocolFamily: P, fullPath: string, address: `0x${string}`);
    static lock: Promise<unknown>;
    sign(messageHex: string): Promise<Signature>;
    exportKey(backup: string, passcode?: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey | RawPrivateKey>;
    exportKeyFromHostedBackup(passcode?: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey | RawPrivateKey>;
}
export declare function isEvm(protocolSpecifier: IProtocolFamily): protocolSpecifier is ProtocolFamily.EVM;
export {};
