import { Wallet, Addresses, PasscodePrompt, Address, HasApi, ProtocolFamily, IProtocolFamily, ExtendedPrivateKey, PrivateKeyFormat, RawPrivateKey } from "../index.js";
export declare class WalletImpl implements Wallet {
    readonly rootContainerID: string;
    readonly endUserID: string;
    readonly addresses: Addresses;
    apiProvider: HasApi;
    constructor(apiProvider: HasApi, rootContainerID: string, endUserID: string);
    finalize(): void;
    validatePasscode(passcode: string): Promise<PasscodePrompt>;
    changePasscode(currentPasscode: string, newPasscode: string): Promise<PasscodePrompt>;
    exportKeys(backup: string, passcode?: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey[] | RawPrivateKey[]>;
    exportKeysFromHostedBackup(passcode?: string, format?: PrivateKeyFormat, protocolFamily?: ProtocolFamily): Promise<ExtendedPrivateKey[] | RawPrivateKey[]>;
    createAddress(protocolSpecifier: ProtocolFamily): Promise<Address<IProtocolFamily>>;
}
export declare class NewWalletImpl extends WalletImpl {
    #private;
    get backup(): string;
    constructor(api: HasApi, rootContainerID: string, endUserID: string, backup: string);
}
export declare function assertPasscodeValid(passcode?: string): void;
