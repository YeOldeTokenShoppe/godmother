export function createEndUserAuthServiceClient(handler) {
    return {
        IssueChallenge(request) {
            const path = `public/v1:issueChallenge`;
            const body = JSON.stringify(request);
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "POST",
                body,
            }, {
                service: "EndUserAuthService",
                method: "IssueChallenge",
            });
        },
        FetchLoginModalDetails(request) {
            if (!request.projectId) {
                throw new Error("missing required field request.project_id");
            }
            const path = `public/v1/projects/${request.projectId}`;
            const body = null;
            const queryParams = [];
            if (request.domainOrigin) {
                queryParams.push(`domainOrigin=${encodeURIComponent(request.domainOrigin.toString())}`);
            }
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "GET",
                body,
            }, {
                service: "EndUserAuthService",
                method: "FetchLoginModalDetails",
            });
        },
        VerifyOAuth(request) {
            const path = `public/v1:verifyOAuth`;
            const body = JSON.stringify(request);
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "POST",
                body,
            }, {
                service: "EndUserAuthService",
                method: "VerifyOAuth",
            });
        },
        LogOut(request) {
            const path = `v1:logOut`;
            const body = JSON.stringify(request);
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "POST",
                body,
            }, {
                service: "EndUserAuthService",
                method: "LogOut",
            });
        },
        RefreshToken(request) {
            const path = `v1:refreshToken`;
            const body = JSON.stringify(request);
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "POST",
                body,
            }, {
                service: "EndUserAuthService",
                method: "RefreshToken",
            });
        },
        VerifyEmailOTP(request) {
            const path = `v1:verifyEmailOtp`;
            const body = JSON.stringify(request);
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "POST",
                body,
            }, {
                service: "EndUserAuthService",
                method: "VerifyEmailOTP",
            });
        },
        ValidateDomainAllowlist(request) {
            const path = `public/v1:validateDomainAllowlist`;
            const body = null;
            const queryParams = [];
            if (request.domainOrigin) {
                queryParams.push(`domainOrigin=${encodeURIComponent(request.domainOrigin.toString())}`);
            }
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "GET",
                body,
            }, {
                service: "EndUserAuthService",
                method: "ValidateDomainAllowlist",
            });
        },
    };
}
export function createAdminEndUserAuthServiceClient(handler) {
    return {
        CreateEmailTemplate(request) {
            if (!request.parent) {
                throw new Error("missing required field request.parent");
            }
            const path = `admin/v1/${request.parent}/emailTemplates`;
            const body = JSON.stringify(request?.emailTemplate ?? {});
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "POST",
                body,
            }, {
                service: "AdminEndUserAuthService",
                method: "CreateEmailTemplate",
            });
        },
        PreviewEmailTemplate(request) {
            if (!request.name) {
                throw new Error("missing required field request.name");
            }
            const path = `admin/v1/${request.name}:preview`;
            const body = JSON.stringify(request);
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "POST",
                body,
            }, {
                service: "AdminEndUserAuthService",
                method: "PreviewEmailTemplate",
            });
        },
    };
}
export function createConsumerAppServiceClient(handler) {
    return {
        CreateProductDetails(request) {
            if (!request.projectId) {
                throw new Error("missing required field request.project_id");
            }
            const path = `admin/v1/projects/${request.projectId}`;
            const body = JSON.stringify(request?.productDetails ?? {});
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "POST",
                body,
            }, {
                service: "ConsumerAppService",
                method: "CreateProductDetails",
            });
        },
        GetProductDetails(request) {
            if (!request.projectId) {
                throw new Error("missing required field request.project_id");
            }
            const path = `admin/v1/projects/${request.projectId}`;
            const body = null;
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "GET",
                body,
            }, {
                service: "ConsumerAppService",
                method: "GetProductDetails",
            });
        },
        UpdateProductDetails(request) {
            if (!request.projectId) {
                throw new Error("missing required field request.project_id");
            }
            const path = `admin/v1/projects/${request.projectId}`;
            const body = JSON.stringify(request?.productDetails ?? {});
            const queryParams = [];
            let uri = path;
            if (queryParams.length > 0) {
                uri += `?${queryParams.join("&")}`;
            }
            return handler({
                path: uri,
                method: "PATCH",
                body,
            }, {
                service: "ConsumerAppService",
                method: "UpdateProductDetails",
            });
        },
    };
}
