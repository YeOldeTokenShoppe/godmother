export type CreateProductDetailsRequest = {
    projectId: string | undefined;
    productDetails: ProductDetails | undefined;
};
export type ProductDetails = {
    projectId: string | undefined;
    domainOrigin: string | undefined;
    isProd: boolean | undefined;
    app: string | undefined;
    logoUri: string | undefined;
    endUserAuthConfig: EndUserAuthConfig | undefined;
    etag: string | undefined;
};
export type EndUserAuthConfig = {
    faviconUri: string | undefined;
    google: boolean | undefined;
    email: boolean | undefined;
};
export type GetProductDetailsRequest = {
    projectId: string | undefined;
};
export type UpdateProductDetailsRequest = {
    projectId: string | undefined;
    productDetails: ProductDetails | undefined;
};
export type FetchLoginModalDetailsRequest = {
    projectId: string | undefined;
    domainOrigin: string | undefined;
};
export type LoginModalDetails = {
    app: string | undefined;
    logoUri: string | undefined;
    faviconUri: string | undefined;
    authGoogleEnabled: boolean | undefined;
    authEmailEnabled: boolean | undefined;
};
export type IssueChallengeRequest = {
    projectId: string | undefined;
    googleOauthChallenger?: GoogleOAuthChallenger;
    emailOtpChallenger?: EmailOTPChallenger;
};
export type GoogleOAuthChallenger = {
    state: string | undefined;
    enableRefresh: boolean | undefined;
};
export type EmailOTPChallenger = {
    email: string | undefined;
};
export type IssueChallengeResponse = {
    googleOauthChallenge?: GoogleOAuthChallenge;
    emailOtpChallenge?: EmailOTPChallenge;
};
export type GoogleOAuthChallenge = {
    challengeUri: string | undefined;
};
export type EmailOTPChallenge = {};
export type VerifyOAuthRequest = {
    projectId: string | undefined;
    enableRefresh: boolean | undefined;
    code: string | undefined;
    oauthProvider: VerifyOAuthRequest_OAUTH_PROVIDER | undefined;
};
export type VerifyOAuthRequest_OAUTH_PROVIDER = "OAUTH_PROVIDER_UNSPECIFIED" | "GOOGLE";
export type VerifyOAuthResponse = {
    authToken: string | undefined;
    refreshToken: string | undefined;
    endUserId: string | undefined;
};
export type LogOutRequest = {
    authToken: string | undefined;
};
export type LogOutResponse = {
    success: boolean | undefined;
};
export type RefreshTokenRequest = {
    refreshToken: string | undefined;
};
export type RefreshTokenResponse = {
    authToken: string | undefined;
    refreshToken: string | undefined;
};
export type VerifyEmailOTPRequest = {
    otp: string | undefined;
    projectId: string | undefined;
    enableRefresh: boolean | undefined;
};
export type VerifyEmailOTPResponse = {
    authToken: string | undefined;
    refreshToken: string | undefined;
    endUserId: string | undefined;
};
export type ValidateDomainAllowlistRequest = {
    domainOrigin: string | undefined;
};
export type ValidateDomainAllowlistResponse = {
    success: boolean | undefined;
    reason: string | undefined;
};
export type EmailTemplate = {
    name: string | undefined;
    projectId: string | undefined;
    uid: string | undefined;
    createTime: wellKnownTimestamp | undefined;
    updateTime: wellKnownTimestamp | undefined;
    deleteTime: wellKnownTimestamp | undefined;
    state: EmailTemplate_State | undefined;
    displayName: string | undefined;
    logoUri: string | undefined;
    app: string | undefined;
    regionCode: string | undefined;
    locale: string | undefined;
    emailOtpTtl: number | undefined;
};
type wellKnownTimestamp = string;
export type EmailTemplate_State = "STATE_UNSPECIFIED" | "PENDING" | "VERIFIED" | "FAILED" | "DELETED";
export type CreateEmailTemplateRequest = {
    parent: string | undefined;
    emailTemplate: EmailTemplate | undefined;
};
export type PreviewEmailTemplateRequest = {
    name: string | undefined;
    email: string | undefined;
};
export type PreviewEmailTemplateResponse = {};
export interface EndUserAuthService {
    IssueChallenge(request: IssueChallengeRequest): Promise<IssueChallengeResponse>;
    FetchLoginModalDetails(request: FetchLoginModalDetailsRequest): Promise<LoginModalDetails>;
    VerifyOAuth(request: VerifyOAuthRequest): Promise<VerifyOAuthResponse>;
    LogOut(request: LogOutRequest): Promise<LogOutResponse>;
    RefreshToken(request: RefreshTokenRequest): Promise<RefreshTokenResponse>;
    VerifyEmailOTP(request: VerifyEmailOTPRequest): Promise<VerifyEmailOTPResponse>;
    ValidateDomainAllowlist(request: ValidateDomainAllowlistRequest): Promise<ValidateDomainAllowlistResponse>;
}
type RequestType = {
    path: string;
    method: string;
    body: string | null;
};
type RequestHandler = (request: RequestType, meta: {
    service: string;
    method: string;
}) => Promise<unknown>;
export declare function createEndUserAuthServiceClient(handler: RequestHandler): EndUserAuthService;
export interface AdminEndUserAuthService {
    CreateEmailTemplate(request: CreateEmailTemplateRequest): Promise<EmailTemplate>;
    PreviewEmailTemplate(request: PreviewEmailTemplateRequest): Promise<PreviewEmailTemplateResponse>;
}
export declare function createAdminEndUserAuthServiceClient(handler: RequestHandler): AdminEndUserAuthService;
export interface ConsumerAppService {
    CreateProductDetails(request: CreateProductDetailsRequest): Promise<ProductDetails>;
    GetProductDetails(request: GetProductDetailsRequest): Promise<ProductDetails>;
    UpdateProductDetails(request: UpdateProductDetailsRequest): Promise<ProductDetails>;
}
export declare function createConsumerAppServiceClient(handler: RequestHandler): ConsumerAppService;
export {};
