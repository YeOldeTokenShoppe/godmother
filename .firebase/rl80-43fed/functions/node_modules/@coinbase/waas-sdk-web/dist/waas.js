var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { StaticImplements } from "./utils.js";
import { WalletsImpl } from "./wallets/wallets.js";
import { AuthImpl } from "./auth/auth.js";
import { AddressesImpl } from "./wallets/addresses.js";
import { MPC } from "./mpc.js";
import * as CoreMPC from "./core/mpc.js";
import { sandboxInit } from "@coinbase/sandbox-rpc";
import mpcSandboxApiVersion from "./mpc.sum.js";
import versions from "./versions.js";
import { PerformanceSensitive, initClientAnalytics, setPerfCheckingEnabled, setVerboseLoggingEnabled, } from "./perf.js";
import { initBugsnag, logError } from "./bugsnag.js";
const COREKMS_WASM_PATH_LOCAL = `/corekms/`;
const SANDBOX_PATH_LOCAL = "/index.html";
const SANDBOX_PATH = `/waas/consumer/assets/waas-sdk-web/${versions.waasSdkWeb}/index.html`;
const COREKMS_WASM_PATH = `/waas/consumer/assets/corekms/${versions.corekms}/`;
const SECURE_SANDBOX_URL = "https://secure-waas.coinbase.com";
const TESTING_SANDBOX_URL = "https://api.developer.coinbase.com";
const COREKMS_PATH = "mpc-eco/operations";
const WAAS_PATH = "waas/";
export const WAAS_ENV = process?.env?.WAAS_ENV ?? "PROD";
const BUGSNAG_API_KEY = "8d6652aa243b728db4b26212db026601";
const normalizeUrl = (url) => {
    if (url.charAt(url.length - 1) !== "/") {
        return url + "/";
    }
    return url;
};
export async function InitializeWaas(options) {
    if (process?.env?.USE_LOCAL_SANDBOX) {
        if (options.prod === true) {
            throw new Error("do not use a local sandbox with InitializeWaasOptions.prod enabled. This could cause compatibility or security issues with your wallets.");
        }
    }
    const baseUrl = options.waasUrl ?? getBaseURL(options.prod === true);
    const sandboxHomePagePath = getSandboxPagePath(options.sandboxPath ?? baseUrl);
    const wasmPath = getWASMPath(options.sandboxPath ?? baseUrl);
    const collectAndReportMetrics = options.collectAndReportMetrics ?? true;
    const verboseLoggingEnabled = options.verbose === true;
    if (options.verbose) {
        console.log("Initialized with URLs: ", {
            wasmPath,
            baseUrl,
            sandboxHomePagePath,
        });
    }
    setPerfCheckingEnabled(collectAndReportMetrics);
    setVerboseLoggingEnabled(verboseLoggingEnabled);
    if (collectAndReportMetrics) {
        await initClientAnalytics();
        await initBugsnag(BUGSNAG_API_KEY);
    }
    sandboxInit({
        sandbox: sandboxHomePagePath,
        sandbox_title: "Waas Secure Sandbox",
        version: mpcSandboxApiVersion,
    });
    WalletsImpl.options = options;
    await WaasImpl.setup(normalizeUrl(baseUrl), normalizeUrl(wasmPath), options);
    return WaasImpl;
}
export async function Logout() {
    await Promise.all([WaasImpl.finalize(), AuthImpl.logout()]);
}
let WaasImpl = class WaasImpl {
    static get auth() {
        return AuthImpl;
    }
    static get wallets() {
        return WalletsImpl;
    }
    static async finalize() {
        await Promise.all([CoreMPC.finalize(), WalletsImpl.finalize()]);
    }
    static async setup(baseUrl, wasmPath, options) {
        const { projectId } = options;
        const verbose = options.verbose === true;
        const hostname = baseUrl + WAAS_PATH;
        AuthImpl.setup({ hostname, verbose, projectId });
        WalletsImpl.apiProvider = AuthImpl;
        AddressesImpl.apiProvider = AuthImpl;
        return new Promise(async (resolve, reject) => {
            try {
                await MPC.loadWasm(wasmPath);
                try {
                    await MPC.SetLogMode(WAAS_ENV === "DEV" ? "on" : "error");
                    await MPC.MwInitialize(getCoreKmsUrl(baseUrl));
                }
                catch (e) {
                    throw new Error("error initializing MPC module: " + e);
                }
                setTimeout(resolve, 50);
            }
            catch (exc) {
                logError(exc);
                reject(exc);
            }
        }).then(async () => {
            await AuthImpl.resume();
        });
    }
};
__decorate([
    PerformanceSensitive
], WaasImpl, "finalize", null);
__decorate([
    PerformanceSensitive
], WaasImpl, "setup", null);
WaasImpl = __decorate([
    StaticImplements()
], WaasImpl);
export { WaasImpl };
function getBaseURL(useSecureSandbox) {
    if (useSecureSandbox) {
        return SECURE_SANDBOX_URL;
    }
    return TESTING_SANDBOX_URL;
}
const isLocalhost = (url) => {
    return new URL(url).host.startsWith("localhost:");
};
function getSandboxPagePath(host) {
    if (isLocalhost(host)) {
        return `${host + SANDBOX_PATH_LOCAL}`;
    }
    return `${host + SANDBOX_PATH}`;
}
function getWASMPath(host) {
    if (isLocalhost(host)) {
        return `${host + COREKMS_WASM_PATH_LOCAL}`;
    }
    return `${host + COREKMS_WASM_PATH}`;
}
function getCoreKmsUrl(baseUrl) {
    if (globalThis.process?.env?.COREKMS_URL_OVERRIDE !== undefined) {
        return globalThis.process?.env.COREKMS_URL_OVERRIDE;
    }
    return baseUrl + COREKMS_PATH;
}
