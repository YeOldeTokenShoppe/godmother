export { InitializeWaas, Logout, InitializeWaasOptions } from "./waas.js";
export { AddressImpl } from "./wallets/addresses.js";
export { WaasCWS } from "./core/cws.js";
export { WaasEndUserAuth } from "./core/enduserauth.js";
export { UserType } from "./auth/util.js";
export type * from "./core/wasm.d.ts";
export * from "./networks.js";
export interface HasApi {
    api: Api;
}
export interface Waas {
    wallets: Wallets;
    auth: Auth;
}
export type LoginOptions = {
    provideAuthToken?: () => Promise<string>;
};
export interface Auth extends HasApi {
    login(options?: LoginOptions): Promise<User>;
    logout(): Promise<void>;
    user?: User;
}
export type User = {
    id: string;
    type: UserType;
    hasWallet: boolean;
};
export interface Wallets extends HasApi {
    wallet?: Wallet | undefined;
    create(passcode?: string): Promise<NewWallet>;
    restoreFromBackup(backup: BackupData, passcode?: string): Promise<Wallet>;
    restoreFromHostedBackup(passcode?: string): Promise<Wallet>;
}
export type PasscodePrompt = {
    status: boolean;
    remainingAttempts: number;
    message: string;
    details: string;
};
export interface Wallet {
    addresses: Addresses;
    createAddress(protocolSpecifier: ProtocolFamily): Promise<Address<IProtocolFamily>>;
    validatePasscode(passcode: string): Promise<PasscodePrompt>;
    changePasscode(currentPasscode: string, newPasscode: string): Promise<PasscodePrompt>;
    exportKeys(backup: string, passcode?: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey[] | RawPrivateKey[]>;
    exportKeysFromHostedBackup(passcode?: string, format?: PrivateKeyFormat, protocolFamily?: ProtocolFamily): Promise<ExtendedPrivateKey[] | RawPrivateKey[]>;
}
export interface Addresses extends HasApi {
    for<T extends IProtocolFamily>(protocolSpecifier: T, index?: number): Promise<Address<T>>;
    all(): Promise<Address<IProtocolFamily>[]>;
}
export type BackupData = string;
export declare enum PrivateKeyFormat {
    RAW = "RAW",
    XPRV = "XPRV"
}
export type RawPrivateKey = {
    keyPath: string;
    ecKeyPublic: string;
    ecKeyPrivate: string;
};
export type ExtendedPrivateKey = {
    keyPath: string;
    xPrivateKey: string;
};
export type NewWallet = Wallet & {
    backup: BackupData;
};
export interface Address<P extends IProtocolFamily> {
    protocolFamily: P;
    address: `0x${string}`;
    sign(message: string): Promise<Signature>;
    exportKey(backup: string, passcode?: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey | RawPrivateKey>;
    exportKeyFromHostedBackup(passcode?: string, format?: PrivateKeyFormat): Promise<ExtendedPrivateKey | RawPrivateKey>;
}
export type Hex = `0x${string}`;
export type Signature = {
    payload: string;
    signedPayload: string;
    r: Hex;
    s: Hex;
    v: number;
};
import { Api } from "./api";
import { UserType } from "./auth/util.js";
import { IProtocolFamily, ProtocolFamily } from "./networks";
