{"version":3,"sources":["../src/config.ts","../src/onramp/generateOnRampURL.ts","../src/utils/createEmbeddedContent.ts","../src/utils/postMessage.ts","../src/utils/CoinbasePixel.ts","../src/utils/CBPayInstance.ts","../src/onramp/initOnRamp.ts","../src/utils/events.ts"],"sourcesContent":["export const DEFAULT_HOST = 'https://pay.coinbase.com';\n","import { DEFAULT_HOST } from '../config';\nimport { OnRampAppParams } from '../types/onramp';\n\nexport type GenerateOnRampURLOptions = {\n  /** This & destinationWallets or onrampToken are required. */\n  appId?: string;\n  destinationWallets?: OnRampAppParams['destinationWallets'];\n  host?: string;\n  /** This or appId & destinationWallets are required. */\n  onrampToken?: string;\n} & Omit<OnRampAppParams, 'destinationWallets'>;\n\nexport const generateOnRampURL = ({\n  host = DEFAULT_HOST,\n  destinationWallets,\n  ...otherParams\n}: GenerateOnRampURLOptions): string => {\n  const url = new URL(host);\n  url.pathname = '/buy/select-asset';\n\n  if (destinationWallets !== undefined) {\n    url.searchParams.append('destinationWallets', JSON.stringify(destinationWallets));\n  }\n  (Object.keys(otherParams) as (keyof typeof otherParams)[]).forEach((key) => {\n    const value = otherParams[key];\n    if (value !== undefined) {\n      url.searchParams.append(key, value.toString());\n    }\n  });\n\n  url.searchParams.sort();\n\n  return url.toString();\n};\n","import { EmbeddedContentStyles } from 'types/widget';\n\nexport const EMBEDDED_IFRAME_ID = 'cbpay-embedded-onramp';\n\nexport const createEmbeddedContent = ({\n  url,\n  width = '100%',\n  height = '100%',\n  position = 'fixed',\n  top = '0px',\n}: {\n  url: string;\n} & EmbeddedContentStyles): HTMLIFrameElement => {\n  const iframe = document.createElement('iframe');\n\n  // Styles\n  iframe.style.border = 'unset';\n  iframe.style.borderWidth = '0';\n  iframe.style.width = width.toString();\n  iframe.style.height = height.toString();\n  iframe.style.position = position;\n  iframe.style.top = top;\n  iframe.id = EMBEDDED_IFRAME_ID;\n  iframe.src = url;\n\n  return iframe;\n};\n","import { JsonObject } from '../types/JsonTypes';\n\nexport enum MessageCodes {\n  LaunchEmbedded = 'launch_embedded',\n  AppReady = 'app_ready',\n  AppParams = 'app_params',\n  SigninSuccess = 'signin_success',\n  Success = 'success', // TODO: deprecate\n  Exit = 'exit', // TODO: deprecate\n  Event = 'event',\n  Error = 'error',\n\n  PixelReady = 'pixel_ready',\n  OnAppParamsNonce = 'on_app_params_nonce',\n}\n\nexport type MessageCode = `${MessageCodes}`;\n\nexport type MessageData = JsonObject;\n\nexport type PostMessageData = {\n  eventName: MessageCode;\n  data?: MessageData;\n};\n\nexport const onBroadcastedPostMessage = (\n  messageCode: MessageCode,\n  {\n    onMessage: callback,\n    shouldUnsubscribe = true,\n    allowedOrigin,\n    onValidateOrigin = () => Promise.resolve(true),\n  }: {\n    onMessage: (data?: MessageData) => void;\n    shouldUnsubscribe?: boolean;\n    allowedOrigin?: string;\n    onValidateOrigin?: (origin: string) => Promise<boolean>;\n  },\n): (() => void) => {\n  const onMessage = (e: MessageEvent) => {\n    const { eventName, data } = parsePostMessage(e.data as string);\n    const isOriginAllowed = !allowedOrigin || e.origin === allowedOrigin;\n\n    if (eventName === messageCode) {\n      void (async () => {\n        if (isOriginAllowed && (await onValidateOrigin(e.origin))) {\n          callback(data);\n          if (shouldUnsubscribe) {\n            window.removeEventListener('message', onMessage);\n          }\n        }\n      })();\n    }\n  };\n\n  window.addEventListener('message', onMessage);\n\n  // Unsubscribe\n  return () => {\n    window.removeEventListener('message', onMessage);\n  };\n};\n\nexport type SdkTarget = Window | { postMessage: typeof window.postMessage };\n\nexport const getSdkTarget = (win: Window): SdkTarget | undefined => {\n  if (win !== window) {\n    // Internal to SDK\n    return win;\n  } else if (isMobileSdkTarget(win)) {\n    // Mobile SDK\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return { postMessage: (message: string) => win.ReactNativeWebView!.postMessage!(message) };\n  } else if (win.opener) {\n    // Button proxy\n    return win.opener;\n  } else if (win.parent !== win.self) {\n    // Third party / SDK\n    return win.parent;\n  } else {\n    return undefined;\n  }\n};\n\nconst isMobileSdkTarget = (win: Window) => {\n  try {\n    return win.ReactNativeWebView?.postMessage !== undefined;\n  } catch {\n    return false;\n  }\n};\n\nexport const broadcastPostMessage = (\n  win: SdkTarget,\n  eventName: MessageCode,\n  { allowedOrigin = '*', data }: { allowedOrigin?: string; data?: MessageData } = {},\n): void => {\n  const message = formatPostMessage(eventName, data);\n  win.postMessage(message, allowedOrigin);\n};\n\nconst parsePostMessage = (data: string): PostMessageData => {\n  try {\n    return JSON.parse(data) as PostMessageData;\n  } catch {\n    return { eventName: data as MessageCode }; // event name only\n  }\n};\n\nconst formatPostMessage = (\n  eventName: PostMessageData['eventName'],\n  data?: PostMessageData['data'],\n): string => {\n  if (data) {\n    return JSON.stringify({ eventName, data });\n  }\n  return eventName;\n};\n","import { DEFAULT_HOST } from '../config';\nimport { EmbeddedContentStyles, Experience } from 'types/widget';\nimport { createEmbeddedContent, EMBEDDED_IFRAME_ID } from './createEmbeddedContent';\nimport { JsonObject } from 'types/JsonTypes';\nimport { broadcastPostMessage, onBroadcastedPostMessage } from './postMessage';\nimport { EventMetadata } from 'types/events';\n\nconst PIXEL_PATH = '/embed';\n\n/** Default time to wait before setting loading to \"failed\" state */\nconst DEFAULT_MAX_LOAD_TIMEOUT = 5000;\nexport const PIXEL_ID = 'coinbase-sdk-connect';\n\nconst PopupSizes: Record<'signin' | 'widget', { width: number; height: number }> = {\n  signin: {\n    width: 460,\n    height: 730,\n  },\n  widget: {\n    width: 430,\n    height: 600,\n  },\n};\n\nexport type ExperienceListeners = {\n  onExit?: (data?: JsonObject) => void;\n  onSuccess?: (data?: JsonObject) => void;\n  onEvent?: (event: EventMetadata) => void;\n  onRequestedUrl?: (url: string) => void;\n};\n\nexport type CoinbasePixelConstructorParams = {\n  host?: string;\n  appId: string;\n  appParams: JsonObject;\n  onReady: (error?: Error) => void;\n  /** Fallback open callback when the pixel failed to load */\n  onFallbackOpen?: () => void;\n  debug?: boolean;\n};\n\nexport type OpenExperienceOptions = {\n  path: string;\n  experienceLoggedIn: Experience;\n  experienceLoggedOut?: Experience;\n  embeddedContentStyles?: EmbeddedContentStyles;\n} & ExperienceListeners;\n\nexport class CoinbasePixel {\n  /**\n   * Tracks the loading state of the embedded pixel\n   * - loading: Attempting to embed iframe, waiting for pixel ready message.\n   * - ready:   Received pixel_ready message to indicate listeners are ready.\n   * - failed:  Failed to load the pixel or an error occurred while loading pixel context.\n   * - waiting_for_response:  Waiting for a post message response.\n   */\n  private state: 'loading' | 'ready' | 'waiting_for_response' | 'failed' = 'loading';\n  private debug: boolean;\n\n  private host: string;\n  private pixelIframe?: HTMLIFrameElement;\n  private appId: string;\n  private nonce = '';\n  private eventStreamListeners: Partial<Record<EventMetadata['eventName'], (() => void)[]>> = {};\n  private unsubs: (() => void)[] = [];\n  private appParams: JsonObject;\n  /** This will be called when the pixel successfully initializes to the error listener event. */\n  private removeErrorListener?: () => void;\n  /** onReady callback which should be triggered when a nonce has successfully been retrieved */\n  private onReadyCallback: CoinbasePixelConstructorParams['onReady'];\n  private onFallbackOpen: CoinbasePixelConstructorParams['onFallbackOpen'];\n\n  public isLoggedIn = false;\n\n  constructor({\n    host = DEFAULT_HOST,\n    appId,\n    appParams,\n    onReady,\n    onFallbackOpen,\n    debug,\n  }: CoinbasePixelConstructorParams) {\n    this.host = host;\n    this.appId = appId;\n    this.appParams = appParams;\n    this.onReadyCallback = onReady;\n    this.onFallbackOpen = onFallbackOpen;\n    this.debug = debug || false;\n\n    this.addPixelReadyListener();\n    this.addErrorListener();\n    this.embedPixel();\n\n    // Setup a timeout for errors that might stop the window from loading i.e. CSP\n    setTimeout(() => {\n      if (this.state !== 'ready') {\n        this.onFailedToLoad();\n      }\n    }, DEFAULT_MAX_LOAD_TIMEOUT);\n  }\n\n  /** Opens the CB Pay experience */\n  public openExperience = (options: OpenExperienceOptions): void => {\n    this.log('Attempting to open experience', { state: this.state });\n\n    // Avoid double clicking when we are waiting on a response for a new nonce\n    if (this.state === 'waiting_for_response') {\n      return;\n    }\n\n    // Still waiting on pixel to load. Queue the options.\n    if (this.state === 'loading') {\n      return;\n    }\n\n    // Pixel failed to load or ran into a critical error, run fallback if provided.\n    if (this.state === 'failed') {\n      this.onFallbackOpen?.();\n      return;\n    }\n\n    if (!this.nonce) {\n      throw new Error('Attempted to open CB Pay experience without nonce');\n    }\n\n    const nonce = this.nonce;\n    this.nonce = '';\n\n    this.setupExperienceListeners(options);\n\n    const { path, experienceLoggedIn, experienceLoggedOut, embeddedContentStyles } = options;\n\n    const widgetUrl = new URL(`${this.host}${path}`);\n    widgetUrl.searchParams.append('appId', this.appId);\n    widgetUrl.searchParams.append('type', 'secure_standalone');\n\n    const experience = this.isLoggedIn\n      ? experienceLoggedIn\n      : experienceLoggedOut || experienceLoggedIn;\n\n    widgetUrl.searchParams.append('nonce', nonce);\n    const url = widgetUrl.toString();\n\n    this.log('Opening experience', { experience, isLoggedIn: this.isLoggedIn });\n\n    if (experience === 'embedded') {\n      const openEmbeddedExperience = () => {\n        const embedded = createEmbeddedContent({ url, ...embeddedContentStyles });\n        if (embeddedContentStyles?.target) {\n          document.querySelector(embeddedContentStyles?.target)?.replaceChildren(embedded);\n        } else {\n          document.body.appendChild(embedded);\n        }\n      };\n\n      if (!this.isLoggedIn) {\n        // Embedded experience opens popup for signin\n        this.startDirectSignin(openEmbeddedExperience);\n      } else {\n        openEmbeddedExperience();\n      }\n    } else if (experience === 'popup' && window.chrome?.windows?.create) {\n      void window.chrome.windows.create(\n        {\n          url,\n          setSelfAsOpener: true,\n          type: 'popup',\n          focused: true,\n          width: PopupSizes.signin.width,\n          height: PopupSizes.signin.height,\n          left: window.screenLeft - PopupSizes.signin.width - 10,\n          top: window.screenTop,\n        },\n        (winRef) => {\n          this.addEventStreamListener('open', () => {\n            if (winRef?.id) {\n              chrome.windows.update(winRef.id, {\n                width: PopupSizes.widget.width,\n                height: PopupSizes.widget.height,\n                left: window.screenLeft - PopupSizes.widget.width - 10,\n                top: window.screenTop,\n              });\n            }\n          });\n        },\n      );\n    } else if (experience === 'new_tab' && window.chrome?.tabs?.create) {\n      void window.chrome.tabs.create({ url });\n    } else {\n      openWindow(url, experience);\n    }\n\n    // For users who exit the experience and want to re-enter, we need a fresh nonce to use.\n    // Additionally, if we trigger sendAppParams too early we'll invalidate the nonce they're opening in this current attempt.\n    // Adding an event listener for when the widget opens allows us to safely request a new nonce for another session.\n    const onOpen = () => {\n      this.sendAppParams();\n      this.removeEventStreamListener('open', onOpen);\n    };\n    this.addEventStreamListener('open', onOpen);\n  };\n\n  public endExperience = (): void => {\n    document.getElementById(EMBEDDED_IFRAME_ID)?.remove();\n  };\n\n  public destroy = (): void => {\n    document.getElementById(PIXEL_ID)?.remove();\n    this.unsubs.forEach((unsub) => unsub());\n  };\n\n  /** Adds a listener for when the pixel is ready and requests an app params nonce when ready */\n  private addPixelReadyListener = (): void => {\n    this.onMessage('pixel_ready', {\n      shouldUnsubscribe: false,\n      onMessage: (data) => {\n        this.log('Received message: pixel_ready');\n        this.isLoggedIn = !!data?.isLoggedIn as boolean;\n\n        this.removeErrorListener?.();\n        this.sendAppParams(() => {\n          this.onReadyCallback?.();\n        });\n      },\n    });\n  };\n\n  private addErrorListener = (): void => {\n    this.removeErrorListener = this.onMessage('error', {\n      shouldUnsubscribe: true,\n      onMessage: (data) => {\n        this.log('Received message: error');\n\n        if (data) {\n          const message = typeof data === 'string' ? data : JSON.stringify(data);\n          this.onReadyCallback?.(new Error(message));\n        }\n      },\n    });\n  };\n\n  /** Creates and adds the pixel to the document */\n  private embedPixel = (): void => {\n    document.getElementById(PIXEL_ID)?.remove();\n    const pixel = createPixel({\n      host: this.host,\n      appId: this.appId,\n    });\n\n    pixel.onerror = this.onFailedToLoad;\n\n    this.pixelIframe = pixel;\n    document.body.appendChild(pixel);\n  };\n\n  /** Failed to load the pixel iframe */\n  private onFailedToLoad = () => {\n    this.state = 'failed';\n\n    // If a fallback option is provided we only want to provide a warning since we can still attempt to open the widget\n    if (this.onFallbackOpen) {\n      if (this.debug) {\n        console.warn('Failed to load CB Pay pixel. Falling back to opening in new tab.');\n      }\n      this.onReadyCallback?.();\n    } else {\n      const error = new Error('Failed to load CB Pay pixel');\n      if (this.debug) {\n        console.error(error);\n      }\n      // If no fallback option provided we're in a critical error state\n      this.onReadyCallback?.(error);\n    }\n  };\n\n  private sendAppParams = (callback?: () => void): void => {\n    // Fetch a new nonce from the pixel\n    if (this.pixelIframe?.contentWindow) {\n      this.log('Sending message: app_params');\n      this.onMessage('on_app_params_nonce', {\n        onMessage: (data) => {\n          this.state = 'ready';\n          this.nonce = (data?.nonce as string) || '';\n          callback?.();\n        },\n      });\n\n      this.state = 'waiting_for_response';\n      broadcastPostMessage(this.pixelIframe.contentWindow, 'app_params', {\n        data: this.appParams,\n      });\n    } else {\n      // Shouldn't be here after loading the pixel.\n      console.error('Failed to find pixel content window');\n      // Set the pixel to the failed state and attempt to open using the fallback method.\n      this.state = 'failed';\n      this.onFallbackOpen?.();\n    }\n  };\n\n  private setupExperienceListeners = ({\n    onSuccess,\n    onExit,\n    onEvent,\n    onRequestedUrl,\n  }: ExperienceListeners) => {\n    this.onMessage('event', {\n      shouldUnsubscribe: false,\n      onMessage: (data) => {\n        const metadata = data as EventMetadata;\n\n        this.eventStreamListeners[metadata.eventName]?.forEach((cb) => cb?.());\n\n        if (metadata.eventName === 'success') {\n          onSuccess?.();\n        }\n        if (metadata.eventName === 'exit') {\n          onExit?.(metadata.error);\n        }\n        if (metadata.eventName === 'request_open_url') {\n          onRequestedUrl?.(metadata.url);\n        }\n        onEvent?.(data as EventMetadata);\n      },\n    });\n  };\n\n  private startDirectSignin = (callback: () => void) => {\n    const queryParams = new URLSearchParams();\n    queryParams.set('appId', this.appId);\n    queryParams.set('type', 'direct');\n    const directSigninUrl = `${this.host}/signin?${queryParams.toString()}`;\n    const signinWinRef = openWindow(directSigninUrl, 'popup');\n\n    this.onMessage('signin_success', {\n      onMessage: () => {\n        signinWinRef?.close();\n        callback();\n      },\n    });\n  };\n\n  private addEventStreamListener = (name: EventMetadata['eventName'], cb: () => void) => {\n    if (this.eventStreamListeners[name]) {\n      this.eventStreamListeners[name]?.push(cb);\n    } else {\n      this.eventStreamListeners[name] = [cb];\n    }\n  };\n\n  private removeEventStreamListener = (name: EventMetadata['eventName'], callback: () => void) => {\n    if (this.eventStreamListeners[name]) {\n      const filteredListeners = this.eventStreamListeners[name]?.filter((cb) => cb !== callback);\n      this.eventStreamListeners[name] = filteredListeners;\n    }\n  };\n\n  private onMessage = (...args: Parameters<typeof onBroadcastedPostMessage>) => {\n    const unsubFxn = onBroadcastedPostMessage(args[0], { allowedOrigin: this.host, ...args[1] });\n    this.unsubs.push(unsubFxn);\n\n    return unsubFxn;\n  };\n\n  private log = (...args: Parameters<typeof console.log>) => {\n    if (this.debug) {\n      console.log('[CBPAY]', ...args);\n    }\n  };\n}\n\nfunction createPixel({ host, appId }: { host: string; appId: string }) {\n  const pixel = document.createElement('iframe');\n  pixel.style.border = 'unset';\n  pixel.style.borderWidth = '0';\n  pixel.style.width = '0';\n  pixel.style.height = '0';\n  pixel.style.height = '0';\n  pixel.id = PIXEL_ID;\n\n  const url = new URL(`${host}${PIXEL_PATH}`);\n  url.searchParams.append('appId', appId);\n  pixel.src = url.toString();\n\n  return pixel;\n}\n\nfunction openWindow(url: string, experience: Experience) {\n  return window.open(\n    url,\n    'Coinbase',\n    experience === 'popup'\n      ? `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, height=${PopupSizes.signin.height},width=${PopupSizes.signin.width}`\n      : undefined,\n  );\n}\n","import { JsonObject } from 'types/JsonTypes';\nimport { CBPayExperienceOptions, Experience, WidgetType } from 'types/widget';\nimport { CoinbasePixel, CoinbasePixelConstructorParams } from './CoinbasePixel';\n\nexport type InternalExperienceOptions = Omit<\n  CBPayExperienceOptions<JsonObject>,\n  'widgetParameters'\n> & {\n  widget: WidgetType;\n  experienceLoggedIn: Experience; // Required\n};\n\nexport type CBPayInstanceConstructorArguments = {\n  appParams: JsonObject;\n} & InternalExperienceOptions &\n  Pick<CoinbasePixelConstructorParams, 'onFallbackOpen' | 'onReady'>;\n\nconst widgetRoutes: Record<WidgetType, string> = {\n  buy: '/buy',\n  checkout: '/checkout',\n};\n\nexport interface CBPayInstanceType {\n  open: () => void;\n  destroy: () => void;\n}\n\nexport class CBPayInstance implements CBPayInstanceType {\n  private pixel: CoinbasePixel;\n  private options: InternalExperienceOptions;\n\n  constructor(options: CBPayInstanceConstructorArguments) {\n    this.options = options;\n    this.pixel = new CoinbasePixel({\n      ...options,\n      appParams: {\n        widget: options.widget,\n        ...options.appParams,\n      },\n    });\n\n    if (options.target) {\n      const targetElement = document.querySelector(options.target);\n      if (targetElement) {\n        targetElement.addEventListener('click', this.open);\n      }\n    }\n  }\n\n  public open = (): void => {\n    const {\n      widget,\n      experienceLoggedIn,\n      experienceLoggedOut,\n      embeddedContentStyles,\n      onExit,\n      onSuccess,\n      onEvent,\n      onRequestedUrl,\n      closeOnSuccess,\n      closeOnExit,\n    } = this.options;\n\n    this.pixel.openExperience({\n      path: widgetRoutes[widget],\n      experienceLoggedIn,\n      experienceLoggedOut,\n      embeddedContentStyles,\n      onExit: () => {\n        onExit?.();\n        if (closeOnExit) {\n          this.pixel.endExperience();\n        }\n      },\n      onSuccess: () => {\n        onSuccess?.();\n        if (closeOnSuccess) {\n          this.pixel.endExperience();\n        }\n      },\n      onRequestedUrl,\n      onEvent,\n    });\n  };\n\n  public destroy = (): void => {\n    this.pixel.destroy();\n  };\n}\n","import { CBPayExperienceOptions } from '../types/widget';\nimport { CBPayInstance, CBPayInstanceType } from '../utils/CBPayInstance';\nimport { OnRampAppParams } from '../types/onramp';\nimport { generateOnRampURL } from './generateOnRampURL';\n\nexport type InitOnRampParams = CBPayExperienceOptions<OnRampAppParams>;\n\nexport type InitOnRampCallback = {\n  (error: Error, instance: null): void;\n  (error: null, instance: CBPayInstanceType): void;\n};\n\nexport const initOnRamp = (\n  {\n    experienceLoggedIn = 'embedded', // default experience type\n    widgetParameters,\n    ...options\n  }: InitOnRampParams,\n  callback: InitOnRampCallback,\n): void => {\n  const instance = new CBPayInstance({\n    ...options,\n    widget: 'buy',\n    experienceLoggedIn,\n    appParams: widgetParameters,\n    onReady: (error) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        callback(null, instance);\n      }\n    },\n    onFallbackOpen: () => {\n      const url = generateOnRampURL({\n        appId: options.appId,\n        host: options.host,\n        ...widgetParameters,\n      });\n      window.open(url);\n    },\n  });\n};\n","import { EventMetadata } from 'types/events';\nimport { broadcastPostMessage, SdkTarget } from './postMessage';\n\nexport function broadcastEvent(sdkTarget: SdkTarget, event: EventMetadata): void {\n  broadcastPostMessage(sdkTarget, 'event', {\n    data: event,\n  });\n}\n"],"mappings":"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","names":["DEFAULT_HOST","generateOnRampURL","host","DEFAULT_HOST","destinationWallets","otherParams","url","URL","pathname","undefined","searchParams","append","JSON","stringify","Object","keys","forEach","key","value","toString","sort","EMBEDDED_IFRAME_ID","createEmbeddedContent","url","width","height","position","top","iframe","document","createElement","style","border","borderWidth","toString","id","src","MessageCodes","LaunchEmbedded","AppReady","AppParams","SigninSuccess","Success","Exit","Event","Error","PixelReady","OnAppParamsNonce","onBroadcastedPostMessage","messageCode","onMessage","callback","shouldUnsubscribe","allowedOrigin","onValidateOrigin","Promise","resolve","e","eventName","data","parsePostMessage","isOriginAllowed","origin","window","removeEventListener","addEventListener","getSdkTarget","win","isMobileSdkTarget","postMessage","message","ReactNativeWebView","opener","parent","self","undefined","broadcastPostMessage","formatPostMessage","JSON","parse","stringify","PIXEL_PATH","DEFAULT_MAX_LOAD_TIMEOUT","PIXEL_ID","PopupSizes","signin","width","height","widget","CoinbasePixel","constructor","host","DEFAULT_HOST","appId","appParams","onReady","onFallbackOpen","debug","state","nonce","eventStreamListeners","unsubs","isLoggedIn","openExperience","options","log","Error","setupExperienceListeners","path","experienceLoggedIn","experienceLoggedOut","embeddedContentStyles","widgetUrl","URL","searchParams","append","experience","url","toString","openEmbeddedExperience","embedded","createEmbeddedContent","target","document","querySelector","replaceChildren","body","appendChild","startDirectSignin","window","chrome","windows","create","setSelfAsOpener","type","focused","left","screenLeft","top","screenTop","winRef","addEventStreamListener","id","update","tabs","openWindow","onOpen","sendAppParams","removeEventStreamListener","endExperience","getElementById","EMBEDDED_IFRAME_ID","remove","destroy","forEach","unsub","addPixelReadyListener","onMessage","shouldUnsubscribe","data","removeErrorListener","onReadyCallback","addErrorListener","message","JSON","stringify","embedPixel","pixel","createPixel","onerror","onFailedToLoad","pixelIframe","console","warn","error","callback","contentWindow","broadcastPostMessage","onSuccess","onExit","onEvent","onRequestedUrl","metadata","eventName","cb","queryParams","URLSearchParams","set","directSigninUrl","signinWinRef","close","name","push","filteredListeners","filter","args","unsubFxn","onBroadcastedPostMessage","allowedOrigin","setTimeout","createElement","style","border","borderWidth","src","open","undefined","widgetRoutes","buy","checkout","CBPayInstance","constructor","options","open","widget","experienceLoggedIn","experienceLoggedOut","embeddedContentStyles","onExit","onSuccess","onEvent","onRequestedUrl","closeOnSuccess","closeOnExit","pixel","openExperience","path","endExperience","destroy","CoinbasePixel","appParams","target","targetElement","document","querySelector","addEventListener","initOnRamp","experienceLoggedIn","widgetParameters","options","callback","instance","CBPayInstance","widget","appParams","onReady","error","onFallbackOpen","url","generateOnRampURL","appId","host","window","open","broadcastEvent","sdkTarget","event","broadcastPostMessage","data"]}