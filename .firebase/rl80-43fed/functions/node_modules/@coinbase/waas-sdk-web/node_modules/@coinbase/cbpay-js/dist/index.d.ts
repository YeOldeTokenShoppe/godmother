declare type DestinationWallet = {
    address: string;
    /** List of networks enabled for the associated address. All assets available per network are displayed to the user. */
    blockchains?: string[];
    /** List of assets enabled for the associated address. They are appended to the available list of assets. */
    assets?: string[];
    /** Restrict the networks available for the associated assets. */
    supportedNetworks?: string[];
};
declare type OnRampExperience = 'buy' | 'send';
declare type BaseOnRampAppParams = {
    /** The destination wallets supported by your application (BTC, ETH, etc). */
    destinationWallets: DestinationWallet[];
    /** The preset input amount as a crypto value. i.e. 0.1 ETH. This will be the initial default for all cryptocurrencies. */
    presetCryptoAmount?: number;
    /**
     * The preset input amount as a fiat value. i.e. 15 USD.
     * This will be the initial default for all cryptocurrencies. Ignored if presetCryptoAmount is also set.
     * Also note this only works for a subset of fiat currencies: USD, CAD, GBP, EUR
     * */
    presetFiatAmount?: number;
    /** The default network that should be selected when multiple networks are present. */
    defaultNetwork?: string;
    /** The default experience the user should see: either transfer funds from Coinbase (`'send'`) or buy them (`'buy'`). */
    defaultExperience?: OnRampExperience;
    handlingRequestedUrls?: boolean;
    /** ID used to link all user transactions created during the session. */
    partnerUserId?: string;
};
declare type OnRampAggregatorAppParams = {
    quoteId: string;
    defaultAsset: string;
    defaultNetwork?: string;
    defaultPaymentMethod: string;
    presetFiatAmount: number;
    fiatCurrency: string;
};
declare type OnRampAppParams = BaseOnRampAppParams | (BaseOnRampAppParams & OnRampAggregatorAppParams);

declare type GenerateOnRampURLOptions = {
    /** This & destinationWallets or onrampToken are required. */
    appId?: string;
    destinationWallets?: OnRampAppParams['destinationWallets'];
    host?: string;
    /** This or appId & destinationWallets are required. */
    onrampToken?: string;
} & Omit<OnRampAppParams, 'destinationWallets'>;
declare const generateOnRampURL: ({ host, destinationWallets, ...otherParams }: GenerateOnRampURLOptions) => string;

declare type OpenEvent = {
    eventName: 'open';
    widgetName: string;
};
declare type TransitionViewEvent = {
    eventName: 'transition_view';
    pageRoute: string;
};
declare type PublicErrorEvent = {
    eventName: 'error';
    error: any;
};
declare type ExitEvent = {
    eventName: 'exit';
    error?: any;
};
declare type SuccessEvent = {
    eventName: 'success';
};
declare type RequestOpenUrlEvent = {
    eventName: 'request_open_url';
    url: string;
};
declare type EventMetadata = OpenEvent | TransitionViewEvent | PublicErrorEvent | ExitEvent | SuccessEvent | RequestOpenUrlEvent;

declare type WidgetType = 'buy' | 'checkout';
declare type Experience = 'embedded' | 'popup' | 'new_tab';
declare type EmbeddedContentStyles = {
    target?: string;
    width?: string;
    height?: string;
    position?: string;
    top?: string;
};
declare type CBPayExperienceOptions<T> = {
    widgetParameters: T;
    target?: string;
    appId: string;
    host?: string;
    debug?: boolean;
    onExit?: (error?: Error) => void;
    onSuccess?: () => void;
    onEvent?: (event: EventMetadata) => void;
    onRequestedUrl?: (url: string) => void;
    closeOnExit?: boolean;
    closeOnSuccess?: boolean;
    embeddedContentStyles?: EmbeddedContentStyles;
    experienceLoggedIn?: Experience;
    experienceLoggedOut?: Experience;
};

/**
Matches a JSON object.
This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. Don't use this as a direct return type as the user would have to double-cast it: `jsonObject as unknown as CustomResponse`. Instead, you could extend your CustomResponse type from it to ensure your type only uses JSON-compatible types: `interface CustomResponse extends JsonObject { â€¦ }`.
@category JSON
*/
declare type JsonObject = {
    [Key in string]?: JsonValue;
};
/**
Matches a JSON array.
@category JSON
*/
declare type JsonArray = JsonValue[];
/**
Matches any valid JSON primitive value.
@category JSON
*/
declare type JsonPrimitive = string | number | boolean | null;
/**
Matches any valid JSON value.
@see `Jsonify` if you need to transform a type to one that is assignable to `JsonValue`.
@category JSON
*/
declare type JsonValue = JsonPrimitive | JsonObject | JsonArray;

declare type CoinbasePixelConstructorParams = {
    host?: string;
    appId: string;
    appParams: JsonObject;
    onReady: (error?: Error) => void;
    /** Fallback open callback when the pixel failed to load */
    onFallbackOpen?: () => void;
    debug?: boolean;
};

declare type InternalExperienceOptions = Omit<CBPayExperienceOptions<JsonObject>, 'widgetParameters'> & {
    widget: WidgetType;
    experienceLoggedIn: Experience;
};
declare type CBPayInstanceConstructorArguments = {
    appParams: JsonObject;
} & InternalExperienceOptions & Pick<CoinbasePixelConstructorParams, 'onFallbackOpen' | 'onReady'>;
interface CBPayInstanceType {
    open: () => void;
    destroy: () => void;
}
declare class CBPayInstance implements CBPayInstanceType {
    private pixel;
    private options;
    constructor(options: CBPayInstanceConstructorArguments);
    open: () => void;
    destroy: () => void;
}

declare type InitOnRampParams = CBPayExperienceOptions<OnRampAppParams>;
declare type InitOnRampCallback = {
    (error: Error, instance: null): void;
    (error: null, instance: CBPayInstanceType): void;
};
declare const initOnRamp: ({ experienceLoggedIn, widgetParameters, ...options }: InitOnRampParams, callback: InitOnRampCallback) => void;

declare enum MessageCodes {
    LaunchEmbedded = "launch_embedded",
    AppReady = "app_ready",
    AppParams = "app_params",
    SigninSuccess = "signin_success",
    Success = "success",
    Exit = "exit",
    Event = "event",
    Error = "error",
    PixelReady = "pixel_ready",
    OnAppParamsNonce = "on_app_params_nonce"
}
declare type MessageCode = `${MessageCodes}`;
declare type MessageData = JsonObject;
declare type PostMessageData = {
    eventName: MessageCode;
    data?: MessageData;
};
declare const onBroadcastedPostMessage: (messageCode: MessageCode, { onMessage: callback, shouldUnsubscribe, allowedOrigin, onValidateOrigin, }: {
    onMessage: (data?: JsonObject | undefined) => void;
    shouldUnsubscribe?: boolean | undefined;
    allowedOrigin?: string | undefined;
    onValidateOrigin?: ((origin: string) => Promise<boolean>) | undefined;
}) => (() => void);
declare type SdkTarget = Window | {
    postMessage: typeof window.postMessage;
};
declare const getSdkTarget: (win: Window) => SdkTarget | undefined;
declare const broadcastPostMessage: (win: SdkTarget, eventName: MessageCode, { allowedOrigin, data }?: {
    allowedOrigin?: string | undefined;
    data?: JsonObject | undefined;
}) => void;

declare function broadcastEvent(sdkTarget: SdkTarget, event: EventMetadata): void;

export { CBPayInstance, CBPayInstanceType, InitOnRampParams, MessageCode, MessageData, PostMessageData, SdkTarget, broadcastEvent, broadcastPostMessage, generateOnRampURL, getSdkTarget, initOnRamp, onBroadcastedPostMessage };
