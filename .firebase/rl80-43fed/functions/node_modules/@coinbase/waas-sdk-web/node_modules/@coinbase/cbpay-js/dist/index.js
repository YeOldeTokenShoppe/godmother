"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _regeneratorRuntime = /*#__PURE__*/ _interopRequireDefault(require("regenerator-runtime"));
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpreadProps(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _optionalChain(ops) {
    var lastAccessLHS = undefined;
    var value = ops[0];
    var i = 1;
    while(i < ops.length){
        var op = ops[i];
        var fn = ops[i + 1];
        i += 2;
        if ((op === "optionalAccess" || op === "optionalCall") && value == null) {
            return undefined;
        }
        if (op === "access" || op === "optionalAccess") {
            lastAccessLHS = value;
            value = fn(value);
        } else if (op === "call" || op === "optionalCall") {
            var _value;
            value = fn(function() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                return (_value = value).call.apply(_value, [
                    lastAccessLHS
                ].concat(_toConsumableArray(args)));
            });
            lastAccessLHS = undefined;
        }
    }
    return value;
}
var __defProp = Object.defineProperty;
var __defNormalProp = function(obj, key, value) {
    return key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: value
    }) : obj[key] = value;
};
var __name = function(target, value) {
    return __defProp(target, "name", {
        value: value,
        configurable: true
    });
};
var __publicField = function(obj, key, value) {
    __defNormalProp(obj, (typeof key === "undefined" ? "undefined" : _typeof(key)) !== "symbol" ? key + "" : key, value);
    return value;
};
// src/config.ts
var DEFAULT_HOST = "https://pay.coinbase.com";
// src/onramp/generateOnRampURL.ts
var generateOnRampURL = /* @__PURE__ */ __name(function(_param) {
    var _host = _param.host, host = _host === void 0 ? DEFAULT_HOST : _host, destinationWallets = _param.destinationWallets, otherParams = _objectWithoutProperties(_param, [
        "host",
        "destinationWallets"
    ]);
    var url = new URL(host);
    url.pathname = "/buy/select-asset";
    if (destinationWallets !== void 0) {
        url.searchParams.append("destinationWallets", JSON.stringify(destinationWallets));
    }
    Object.keys(otherParams).forEach(function(key) {
        var value = otherParams[key];
        if (value !== void 0) {
            url.searchParams.append(key, value.toString());
        }
    });
    url.searchParams.sort();
    return url.toString();
}, "generateOnRampURL");
// src/utils/createEmbeddedContent.ts
var EMBEDDED_IFRAME_ID = "cbpay-embedded-onramp";
var createEmbeddedContent = /* @__PURE__ */ __name(function(param) {
    var url = param.url, _width = param.width, width = _width === void 0 ? "100%" : _width, _height = param.height, height = _height === void 0 ? "100%" : _height, _position = param.position, position = _position === void 0 ? "fixed" : _position, _top = param.top, top = _top === void 0 ? "0px" : _top;
    var iframe = document.createElement("iframe");
    iframe.style.border = "unset";
    iframe.style.borderWidth = "0";
    iframe.style.width = width.toString();
    iframe.style.height = height.toString();
    iframe.style.position = position;
    iframe.style.top = top;
    iframe.id = EMBEDDED_IFRAME_ID;
    iframe.src = url;
    return iframe;
}, "createEmbeddedContent");
// src/utils/postMessage.ts
var MessageCodes;
(function(MessageCodes2) {
    MessageCodes2["LaunchEmbedded"] = "launch_embedded";
    MessageCodes2["AppReady"] = "app_ready";
    MessageCodes2["AppParams"] = "app_params";
    MessageCodes2["SigninSuccess"] = "signin_success";
    MessageCodes2["Success"] = "success";
    MessageCodes2["Exit"] = "exit";
    MessageCodes2["Event"] = "event";
    MessageCodes2["Error"] = "error";
    MessageCodes2["PixelReady"] = "pixel_ready";
    MessageCodes2["OnAppParamsNonce"] = "on_app_params_nonce";
})(MessageCodes || (MessageCodes = {}));
var onBroadcastedPostMessage = /* @__PURE__ */ __name(function(messageCode, param) {
    var callback = param.onMessage, _shouldUnsubscribe = param.shouldUnsubscribe, shouldUnsubscribe = _shouldUnsubscribe === void 0 ? true : _shouldUnsubscribe, allowedOrigin = param.allowedOrigin, _onValidateOrigin = param.onValidateOrigin, onValidateOrigin = _onValidateOrigin === void 0 ? /* @__PURE__ */ __name(function() {
        return Promise.resolve(true);
    }, "onValidateOrigin") : _onValidateOrigin;
    var onMessage = /* @__PURE__ */ __name(function(e) {
        var ref = parsePostMessage(e.data), eventName = ref.eventName, data = ref.data;
        var isOriginAllowed = !allowedOrigin || e.origin === allowedOrigin;
        if (eventName === messageCode) {
            void _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime.default.mark(function _callee() {
                return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
                    while(1)switch(_ctx.prev = _ctx.next){
                        case 0:
                            _ctx.t0 = isOriginAllowed;
                            if (!_ctx.t0) {
                                _ctx.next = 5;
                                break;
                            }
                            _ctx.next = 4;
                            return onValidateOrigin(e.origin);
                        case 4:
                            _ctx.t0 = _ctx.sent;
                        case 5:
                            if (!_ctx.t0) {
                                _ctx.next = 7;
                                break;
                            }
                            {
                                callback(data);
                                if (shouldUnsubscribe) {
                                    window.removeEventListener("message", onMessage);
                                }
                            }
                        case 7:
                        case "end":
                            return _ctx.stop();
                    }
                }, _callee);
            }))();
        }
    }, "onMessage");
    window.addEventListener("message", onMessage);
    return function() {
        window.removeEventListener("message", onMessage);
    };
}, "onBroadcastedPostMessage");
var getSdkTarget = /* @__PURE__ */ __name(function(win) {
    if (win !== window) {
        return win;
    } else if (isMobileSdkTarget(win)) {
        return {
            postMessage: function(message) {
                return win.ReactNativeWebView.postMessage(message);
            }
        };
    } else if (win.opener) {
        return win.opener;
    } else if (win.parent !== win.self) {
        return win.parent;
    } else {
        return void 0;
    }
}, "getSdkTarget");
var isMobileSdkTarget = /* @__PURE__ */ __name(function(win) {
    try {
        return _optionalChain([
            win,
            "access",
            function(_) {
                return _.ReactNativeWebView;
            },
            "optionalAccess",
            function(_2) {
                return _2.postMessage;
            }
        ]) !== void 0;
    } catch (e2) {
        return false;
    }
}, "isMobileSdkTarget");
var broadcastPostMessage = /* @__PURE__ */ __name(function(win, eventName) {
    var ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _allowedOrigin = ref.allowedOrigin, allowedOrigin = _allowedOrigin === void 0 ? "*" : _allowedOrigin, data = ref.data;
    var message = formatPostMessage(eventName, data);
    win.postMessage(message, allowedOrigin);
}, "broadcastPostMessage");
var parsePostMessage = /* @__PURE__ */ __name(function(data) {
    try {
        return JSON.parse(data);
    } catch (e3) {
        return {
            eventName: data
        };
    }
}, "parsePostMessage");
var formatPostMessage = /* @__PURE__ */ __name(function(eventName, data) {
    if (data) {
        return JSON.stringify({
            eventName: eventName,
            data: data
        });
    }
    return eventName;
}, "formatPostMessage");
// src/utils/CoinbasePixel.ts
var PIXEL_PATH = "/embed";
var DEFAULT_MAX_LOAD_TIMEOUT = 5e3;
var PIXEL_ID = "coinbase-sdk-connect";
var PopupSizes = {
    signin: {
        width: 460,
        height: 730
    },
    widget: {
        width: 430,
        height: 600
    }
};
var CoinbasePixel = function CoinbasePixel(param) {
    var _host = param.host, host = _host === void 0 ? DEFAULT_HOST : _host, appId = param.appId, appParams = param.appParams, onReady = param.onReady, onFallbackOpen = param.onFallbackOpen, debug = param.debug;
    var _this = this;
    _classCallCheck(this, CoinbasePixel);
    __publicField(this, "state", "loading");
    __publicField(this, "nonce", "");
    __publicField(this, "eventStreamListeners", {});
    __publicField(this, "unsubs", []);
    __publicField(this, "isLoggedIn", false);
    __publicField(this, "openExperience", /* @__PURE__ */ __name(function(options) {
        _this.log("Attempting to open experience", {
            state: _this.state
        });
        if (_this.state === "waiting_for_response") {
            return;
        }
        if (_this.state === "loading") {
            return;
        }
        if (_this.state === "failed") {
            _optionalChain([
                _this,
                "access",
                function(_3) {
                    return _3.onFallbackOpen;
                },
                "optionalCall",
                function(_4) {
                    return _4();
                }
            ]);
            return;
        }
        if (!_this.nonce) {
            throw new Error("Attempted to open CB Pay experience without nonce");
        }
        var nonce = _this.nonce;
        _this.nonce = "";
        _this.setupExperienceListeners(options);
        var path = options.path, experienceLoggedIn = options.experienceLoggedIn, experienceLoggedOut = options.experienceLoggedOut, embeddedContentStyles = options.embeddedContentStyles;
        var widgetUrl = new URL("".concat(_this.host).concat(path));
        widgetUrl.searchParams.append("appId", _this.appId);
        widgetUrl.searchParams.append("type", "secure_standalone");
        var experience = _this.isLoggedIn ? experienceLoggedIn : experienceLoggedOut || experienceLoggedIn;
        widgetUrl.searchParams.append("nonce", nonce);
        var url = widgetUrl.toString();
        _this.log("Opening experience", {
            experience: experience,
            isLoggedIn: _this.isLoggedIn
        });
        if (experience === "embedded") {
            var openEmbeddedExperience = /* @__PURE__ */ __name(function() {
                var embedded = createEmbeddedContent(_objectSpread({
                    url: url
                }, embeddedContentStyles));
                if (_optionalChain([
                    embeddedContentStyles,
                    "optionalAccess",
                    function(_5) {
                        return _5.target;
                    }
                ])) {
                    _optionalChain([
                        document,
                        "access",
                        function(_6) {
                            return _6.querySelector;
                        },
                        "call",
                        function(_7) {
                            return _7(_optionalChain([
                                embeddedContentStyles,
                                "optionalAccess",
                                function(_8) {
                                    return _8.target;
                                }
                            ]));
                        },
                        "optionalAccess",
                        function(_9) {
                            return _9.replaceChildren;
                        },
                        "call",
                        function(_10) {
                            return _10(embedded);
                        }
                    ]);
                } else {
                    document.body.appendChild(embedded);
                }
            }, "openEmbeddedExperience");
            if (!_this.isLoggedIn) {
                _this.startDirectSignin(openEmbeddedExperience);
            } else {
                openEmbeddedExperience();
            }
        } else if (experience === "popup" && _optionalChain([
            window,
            "access",
            function(_11) {
                return _11.chrome;
            },
            "optionalAccess",
            function(_12) {
                return _12.windows;
            },
            "optionalAccess",
            function(_13) {
                return _13.create;
            }
        ])) {
            void window.chrome.windows.create({
                url: url,
                setSelfAsOpener: true,
                type: "popup",
                focused: true,
                width: PopupSizes.signin.width,
                height: PopupSizes.signin.height,
                left: window.screenLeft - PopupSizes.signin.width - 10,
                top: window.screenTop
            }, function(winRef) {
                _this.addEventStreamListener("open", function() {
                    if (_optionalChain([
                        winRef,
                        "optionalAccess",
                        function(_14) {
                            return _14.id;
                        }
                    ])) {
                        chrome.windows.update(winRef.id, {
                            width: PopupSizes.widget.width,
                            height: PopupSizes.widget.height,
                            left: window.screenLeft - PopupSizes.widget.width - 10,
                            top: window.screenTop
                        });
                    }
                });
            });
        } else if (experience === "new_tab" && _optionalChain([
            window,
            "access",
            function(_15) {
                return _15.chrome;
            },
            "optionalAccess",
            function(_16) {
                return _16.tabs;
            },
            "optionalAccess",
            function(_17) {
                return _17.create;
            }
        ])) {
            void window.chrome.tabs.create({
                url: url
            });
        } else {
            openWindow(url, experience);
        }
        var onOpen = /* @__PURE__ */ __name(function() {
            _this.sendAppParams();
            _this.removeEventStreamListener("open", onOpen);
        }, "onOpen");
        _this.addEventStreamListener("open", onOpen);
    }, "openExperience"));
    __publicField(this, "endExperience", /* @__PURE__ */ __name(function() {
        _optionalChain([
            document,
            "access",
            function(_18) {
                return _18.getElementById;
            },
            "call",
            function(_19) {
                return _19(EMBEDDED_IFRAME_ID);
            },
            "optionalAccess",
            function(_20) {
                return _20.remove;
            },
            "call",
            function(_21) {
                return _21();
            }
        ]);
    }, "endExperience"));
    __publicField(this, "destroy", /* @__PURE__ */ __name(function() {
        _optionalChain([
            document,
            "access",
            function(_22) {
                return _22.getElementById;
            },
            "call",
            function(_23) {
                return _23(PIXEL_ID);
            },
            "optionalAccess",
            function(_24) {
                return _24.remove;
            },
            "call",
            function(_25) {
                return _25();
            }
        ]);
        _this.unsubs.forEach(function(unsub) {
            return unsub();
        });
    }, "destroy"));
    __publicField(this, "addPixelReadyListener", /* @__PURE__ */ __name(function() {
        _this.onMessage("pixel_ready", {
            shouldUnsubscribe: false,
            onMessage: function(data) {
                _this.log("Received message: pixel_ready");
                _this.isLoggedIn = !!_optionalChain([
                    data,
                    "optionalAccess",
                    function(_26) {
                        return _26.isLoggedIn;
                    }
                ]);
                _optionalChain([
                    _this,
                    "access",
                    function(_27) {
                        return _27.removeErrorListener;
                    },
                    "optionalCall",
                    function(_28) {
                        return _28();
                    }
                ]);
                _this.sendAppParams(function() {
                    _optionalChain([
                        _this,
                        "access",
                        function(_29) {
                            return _29.onReadyCallback;
                        },
                        "optionalCall",
                        function(_30) {
                            return _30();
                        }
                    ]);
                });
            }
        });
    }, "addPixelReadyListener"));
    __publicField(this, "addErrorListener", /* @__PURE__ */ __name(function() {
        _this.removeErrorListener = _this.onMessage("error", {
            shouldUnsubscribe: true,
            onMessage: function(data) {
                _this.log("Received message: error");
                if (data) {
                    var message = typeof data === "string" ? data : JSON.stringify(data);
                    _optionalChain([
                        _this,
                        "access",
                        function(_31) {
                            return _31.onReadyCallback;
                        },
                        "optionalCall",
                        function(_32) {
                            return _32(new Error(message));
                        }
                    ]);
                }
            }
        });
    }, "addErrorListener"));
    __publicField(this, "embedPixel", /* @__PURE__ */ __name(function() {
        _optionalChain([
            document,
            "access",
            function(_33) {
                return _33.getElementById;
            },
            "call",
            function(_34) {
                return _34(PIXEL_ID);
            },
            "optionalAccess",
            function(_35) {
                return _35.remove;
            },
            "call",
            function(_36) {
                return _36();
            }
        ]);
        var pixel = createPixel({
            host: _this.host,
            appId: _this.appId
        });
        pixel.onerror = _this.onFailedToLoad;
        _this.pixelIframe = pixel;
        document.body.appendChild(pixel);
    }, "embedPixel"));
    __publicField(this, "onFailedToLoad", /* @__PURE__ */ __name(function() {
        _this.state = "failed";
        if (_this.onFallbackOpen) {
            if (_this.debug) {
                console.warn("Failed to load CB Pay pixel. Falling back to opening in new tab.");
            }
            _optionalChain([
                _this,
                "access",
                function(_37) {
                    return _37.onReadyCallback;
                },
                "optionalCall",
                function(_38) {
                    return _38();
                }
            ]);
        } else {
            var error = new Error("Failed to load CB Pay pixel");
            if (_this.debug) {
                console.error(error);
            }
            _optionalChain([
                _this,
                "access",
                function(_39) {
                    return _39.onReadyCallback;
                },
                "optionalCall",
                function(_40) {
                    return _40(error);
                }
            ]);
        }
    }, "onFailedToLoad"));
    __publicField(this, "sendAppParams", /* @__PURE__ */ __name(function(callback) {
        if (_optionalChain([
            _this,
            "access",
            function(_41) {
                return _41.pixelIframe;
            },
            "optionalAccess",
            function(_42) {
                return _42.contentWindow;
            }
        ])) {
            _this.log("Sending message: app_params");
            _this.onMessage("on_app_params_nonce", {
                onMessage: function(data) {
                    _this.state = "ready";
                    _this.nonce = _optionalChain([
                        data,
                        "optionalAccess",
                        function(_43) {
                            return _43.nonce;
                        }
                    ]) || "";
                    _optionalChain([
                        callback,
                        "optionalCall",
                        function(_44) {
                            return _44();
                        }
                    ]);
                }
            });
            _this.state = "waiting_for_response";
            broadcastPostMessage(_this.pixelIframe.contentWindow, "app_params", {
                data: _this.appParams
            });
        } else {
            console.error("Failed to find pixel content window");
            _this.state = "failed";
            _optionalChain([
                _this,
                "access",
                function(_45) {
                    return _45.onFallbackOpen;
                },
                "optionalCall",
                function(_46) {
                    return _46();
                }
            ]);
        }
    }, "sendAppParams"));
    __publicField(this, "setupExperienceListeners", /* @__PURE__ */ __name(function(param) {
        var onSuccess = param.onSuccess, onExit = param.onExit, onEvent = param.onEvent, onRequestedUrl = param.onRequestedUrl;
        _this.onMessage("event", {
            shouldUnsubscribe: false,
            onMessage: function(data) {
                var metadata = data;
                _optionalChain([
                    _this,
                    "access",
                    function(_47) {
                        return _47.eventStreamListeners;
                    },
                    "access",
                    function(_48) {
                        return _48[metadata.eventName];
                    },
                    "optionalAccess",
                    function(_49) {
                        return _49.forEach;
                    },
                    "call",
                    function(_50) {
                        return _50(function(cb) {
                            return _optionalChain([
                                cb,
                                "optionalCall",
                                function(_51) {
                                    return _51();
                                }
                            ]);
                        });
                    }
                ]);
                if (metadata.eventName === "success") {
                    _optionalChain([
                        onSuccess,
                        "optionalCall",
                        function(_52) {
                            return _52();
                        }
                    ]);
                }
                if (metadata.eventName === "exit") {
                    _optionalChain([
                        onExit,
                        "optionalCall",
                        function(_53) {
                            return _53(metadata.error);
                        }
                    ]);
                }
                if (metadata.eventName === "request_open_url") {
                    _optionalChain([
                        onRequestedUrl,
                        "optionalCall",
                        function(_54) {
                            return _54(metadata.url);
                        }
                    ]);
                }
                _optionalChain([
                    onEvent,
                    "optionalCall",
                    function(_55) {
                        return _55(data);
                    }
                ]);
            }
        });
    }, "setupExperienceListeners"));
    __publicField(this, "startDirectSignin", /* @__PURE__ */ __name(function(callback) {
        var queryParams = new URLSearchParams();
        queryParams.set("appId", _this.appId);
        queryParams.set("type", "direct");
        var directSigninUrl = "".concat(_this.host, "/signin?").concat(queryParams.toString());
        var signinWinRef = openWindow(directSigninUrl, "popup");
        _this.onMessage("signin_success", {
            onMessage: function() {
                _optionalChain([
                    signinWinRef,
                    "optionalAccess",
                    function(_56) {
                        return _56.close;
                    },
                    "call",
                    function(_57) {
                        return _57();
                    }
                ]);
                callback();
            }
        });
    }, "startDirectSignin"));
    __publicField(this, "addEventStreamListener", /* @__PURE__ */ __name(function(name, cb) {
        if (_this.eventStreamListeners[name]) {
            _optionalChain([
                _this,
                "access",
                function(_58) {
                    return _58.eventStreamListeners;
                },
                "access",
                function(_59) {
                    return _59[name];
                },
                "optionalAccess",
                function(_60) {
                    return _60.push;
                },
                "call",
                function(_61) {
                    return _61(cb);
                }
            ]);
        } else {
            _this.eventStreamListeners[name] = [
                cb
            ];
        }
    }, "addEventStreamListener"));
    __publicField(this, "removeEventStreamListener", /* @__PURE__ */ __name(function(name, callback) {
        if (_this.eventStreamListeners[name]) {
            var filteredListeners = _optionalChain([
                _this,
                "access",
                function(_62) {
                    return _62.eventStreamListeners;
                },
                "access",
                function(_63) {
                    return _63[name];
                },
                "optionalAccess",
                function(_64) {
                    return _64.filter;
                },
                "call",
                function(_65) {
                    return _65(function(cb) {
                        return cb !== callback;
                    });
                }
            ]);
            _this.eventStreamListeners[name] = filteredListeners;
        }
    }, "removeEventStreamListener"));
    __publicField(this, "onMessage", /* @__PURE__ */ __name(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var unsubFxn = onBroadcastedPostMessage(args[0], _objectSpread({
            allowedOrigin: _this.host
        }, args[1]));
        _this.unsubs.push(unsubFxn);
        return unsubFxn;
    }, "onMessage"));
    __publicField(this, "log", /* @__PURE__ */ __name(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (_this.debug) {
            var _console;
            (_console = console).log.apply(_console, [
                "[CBPAY]"
            ].concat(_toConsumableArray(args)));
        }
    }, "log"));
    this.host = host;
    this.appId = appId;
    this.appParams = appParams;
    this.onReadyCallback = onReady;
    this.onFallbackOpen = onFallbackOpen;
    this.debug = debug || false;
    this.addPixelReadyListener();
    this.addErrorListener();
    this.embedPixel();
    setTimeout(function() {
        if (_this.state !== "ready") {
            _this.onFailedToLoad();
        }
    }, DEFAULT_MAX_LOAD_TIMEOUT);
};
__name(CoinbasePixel, "CoinbasePixel");
function createPixel(param) {
    var host = param.host, appId = param.appId;
    var pixel = document.createElement("iframe");
    pixel.style.border = "unset";
    pixel.style.borderWidth = "0";
    pixel.style.width = "0";
    pixel.style.height = "0";
    pixel.style.height = "0";
    pixel.id = PIXEL_ID;
    var url = new URL("".concat(host).concat(PIXEL_PATH));
    url.searchParams.append("appId", appId);
    pixel.src = url.toString();
    return pixel;
}
__name(createPixel, "createPixel");
function openWindow(url, experience) {
    return window.open(url, "Coinbase", experience === "popup" ? "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, height=".concat(PopupSizes.signin.height, ",width=").concat(PopupSizes.signin.width) : void 0);
}
__name(openWindow, "openWindow");
// src/utils/CBPayInstance.ts
var widgetRoutes = {
    buy: "/buy",
    checkout: "/checkout"
};
var CBPayInstance = function CBPayInstance(options) {
    var _this = this;
    _classCallCheck(this, CBPayInstance);
    __publicField(this, "open", /* @__PURE__ */ __name(function() {
        var _options = _this.options, widget = _options.widget, experienceLoggedIn = _options.experienceLoggedIn, experienceLoggedOut = _options.experienceLoggedOut, embeddedContentStyles = _options.embeddedContentStyles, onExit = _options.onExit, onSuccess = _options.onSuccess, onEvent = _options.onEvent, onRequestedUrl = _options.onRequestedUrl, closeOnSuccess = _options.closeOnSuccess, closeOnExit = _options.closeOnExit;
        _this.pixel.openExperience({
            path: widgetRoutes[widget],
            experienceLoggedIn: experienceLoggedIn,
            experienceLoggedOut: experienceLoggedOut,
            embeddedContentStyles: embeddedContentStyles,
            onExit: function() {
                _optionalChain([
                    onExit,
                    "optionalCall",
                    function(_66) {
                        return _66();
                    }
                ]);
                if (closeOnExit) {
                    _this.pixel.endExperience();
                }
            },
            onSuccess: function() {
                _optionalChain([
                    onSuccess,
                    "optionalCall",
                    function(_67) {
                        return _67();
                    }
                ]);
                if (closeOnSuccess) {
                    _this.pixel.endExperience();
                }
            },
            onRequestedUrl: onRequestedUrl,
            onEvent: onEvent
        });
    }, "open"));
    __publicField(this, "destroy", /* @__PURE__ */ __name(function() {
        _this.pixel.destroy();
    }, "destroy"));
    this.options = options;
    this.pixel = new CoinbasePixel(_objectSpreadProps(_objectSpread({}, options), {
        appParams: _objectSpread({
            widget: options.widget
        }, options.appParams)
    }));
    if (options.target) {
        var targetElement = document.querySelector(options.target);
        if (targetElement) {
            targetElement.addEventListener("click", this.open);
        }
    }
};
__name(CBPayInstance, "CBPayInstance");
// src/onramp/initOnRamp.ts
var initOnRamp = /* @__PURE__ */ __name(function(_param, callback) {
    var _experienceLoggedIn = _param.experienceLoggedIn, experienceLoggedIn = _experienceLoggedIn === void 0 ? "embedded" : _experienceLoggedIn, widgetParameters = _param.widgetParameters, options = _objectWithoutProperties(_param, [
        "experienceLoggedIn",
        "widgetParameters"
    ]);
    var instance = new CBPayInstance(_objectSpreadProps(_objectSpread({}, options), {
        widget: "buy",
        experienceLoggedIn: experienceLoggedIn,
        appParams: widgetParameters,
        onReady: function(error) {
            if (error) {
                callback(error, null);
            } else {
                callback(null, instance);
            }
        },
        onFallbackOpen: function() {
            var url = generateOnRampURL(_objectSpread({
                appId: options.appId,
                host: options.host
            }, widgetParameters));
            window.open(url);
        }
    }));
}, "initOnRamp");
// src/utils/events.ts
function broadcastEvent(sdkTarget, event) {
    broadcastPostMessage(sdkTarget, "event", {
        data: event
    });
}
__name(broadcastEvent, "broadcastEvent");
exports.CBPayInstance = CBPayInstance;
exports.broadcastEvent = broadcastEvent;
exports.broadcastPostMessage = broadcastPostMessage;
exports.generateOnRampURL = generateOnRampURL;
exports.getSdkTarget = getSdkTarget;
exports.initOnRamp = initOnRamp;
exports.onBroadcastedPostMessage = onBroadcastedPostMessage;
//# sourceMappingURL=index.js.map