/// <reference types="react" />
import { InitializeWaasOptions, Wallet, ProtocolFamily } from "@coinbase/waas-sdk-web";
import * as WaaS from "@coinbase/waas-sdk-web";
export { InitializeWaasOptions } from "@coinbase/waas-sdk-web";
export type TReactLoginOptions = {
    /**
     * A lambda that Waas will invoke to retrieve a new auth token.
     *
     * e.g, this will be called to get a first auth token, and subsequently if your
     * connection 401's.
     **/
    provideAuthToken?: () => Promise<string>;
};
/**
 * A wrapper around the {@link Waas} instance, enabling reactivity around the
 * management of the wallet.
 */
export type TReactWaas = {
    /**
     * Login the user, using the provided options.
     *
     * For developer-delegated auth, you should call this function with the `provideAuthToken` option.
     *
     * @param options The options to use for logging in the user.
     * @params options.provideAuthToken A lambda that Waas will invoke to retrieve a new auth token.
     * @returns A promise that resolves with the user object once logged in.
     */
    login: (options?: TReactLoginOptions) => Promise<TReactUser>;
    /**
     * Removes the current active wallet and logs out the user.
     *
     * NOTE: This will cause data-loss, if the user doesn't have their backup string stored somewhere
     * i.e for use with `restoreFromBackup()`
     *
     * In doing so, this will update the wallet as returned from
     *
     * `const {wallet} = useWalletContext()` to be undefined.
     */
    logout: () => Promise<void>;
};
/**
 * A wrapper for all of the user-scoped wallet management functions available in the Waas SDK.
 */
export type TReactUser = {
    /**
     * Whether the user has a created wallet already.
     */
    hasWallet: boolean;
    /**
     * Creates a wallet, with an optional passcode.
     *
     * In doing so, this will update the wallet as returned from
     *
     *  `const {wallet} = useWalletContext()`
     *
     * automatically, via a react state update.
     *
     * @param passcode The optional passcode to use for the wallet.
     * @returns The created wallet.
     */
    create: (passcode?: string) => Promise<WaaS.NewWallet>;
    /**
     * Restores a wallet from the backup string, which is available on all newly created {@link NewWallet}.
     *
     * In doing so, this will update the wallet as returned from
     *
     *  `const {wallet} = useWalletContext()`
     *
     * automatically, via a react state update.
     *
     * @param backup The backupData, as returned from {@WaaS.NewWallet.backup}
     * @param passcode The passcode associated with the wallet.
     * @returns The restored wallet.
     */
    restoreFromBackup: (backup: string, passcode?: string) => Promise<Wallet>;
    /**
     * Assuming that you've signed an auth token for a particular user,
     * this function attempts to restore that user's wallet (given their optional passcode).
     *
     * This utillizes Coinbase's encrypted cloud recovery option for MPC wallets.
     *
     * NOTE: This feature is not generally available. Contact Coinbase if you're interested in learning more.
     * NOTE: This feature is only available if `<WalletProvider enableHostedBackups>` is set.
     * NOTE: This feature requires a user-scoped JWT, signed via `issueAuthTokenForUser`.
     *
     * @param passcode - If the user that you signed the access token for
     *                   has a passcode on their wallet, you need to supply it here.
     *
     * @returns A wallet, if we were able to restore it.
     */
    restoreFromHostedBackup?: (passcode?: string) => Promise<Wallet>;
};
export type TWaasContext = {
    /**
     * Waas's active wallet.
     *
     * If this is null, then;
     *   - (${@link isCreatingWallet} == true) implies that a wallet is actively being created via MPC, or
     *   - (${@link isCreatingWallet} == false) implies that the user has no wallet.
     */
    wallet: Wallet | undefined;
    /**
     * If an error occurs during initialization, it will surface here.
     */
    error: Error | undefined;
    /**
     * The current loaded Waas instance.
     *
     * If this is null, it is assumed that Waas is still loading.
     */
    waas: TReactWaas | undefined;
    /**
     * The current logged in user.
     *
     * If this is null, the user is not yet logged in.
     */
    user: TReactUser | undefined;
    /**
     * If true, WaaS is actively creating or restoring a wallet via MPC.
     */
    isCreatingWallet: boolean;
    /**
     * If true, WaaS is actively logging in the user.
     */
    isLoggingIn: boolean;
};
/**
 * Additional initialization options available for Waas React, when using a
 *
 * <WalletProvider />.
 */
type TProviderOptions = InitializeWaasOptions & {
    children: React.ReactNode;
    autoCreateWallet?: boolean;
};
/**
 * A provider for injecting the WalletContext into a react app.
 *
 * @param options See {@link TProviderOptions}
 * @returns A JSX node for injecting the wallet provider.
 *
 * @example
 *
 * // 1. Logging in a user and creating a wallet with interaction
 * ```
 *  <WalletProvider>
 *    <MyComponent />
 *  </WalletProvider>
 *
 *  const MyComponent = () => {
 *    const { waas, user, wallet, isLoggingIn, isCreatingWallet } = useWalletContext();
 *    if (!waas) {
 *      return <Loading />
 *    }
 *    if (!user) {
 *      const provideAuthToken = async (): string => {
 *        // fetch a new auth token from your server.
 *      };
 *      return <button onClick={() => waas.login({ provideAuthToken })} disabled={isLoggingIn}>Login</button>
 *    }
 *    if (!wallet) {
 *       return <button onClick={() => user.create()} disabled={isCreatingWallet}>Create Wallet</button>
 *    }
 *    return <p>Wallet created.</p>
 *  }
 * ```
 * // 2. Automatically login and auto-create a wallet on start
 * ```
 *  <WalletProvider autoCreateWallet={true}>
 *    <MyComponent />
 *  </WalletProvider>
 *
 *  const MyComponent = () => {
 *    const { waas, user, wallet, isLoggingIn, isCreatingWallet } = useWalletContext();
 *    useEffect(() => {
 *      // If WaaS is not initialized, the user is logged in, or the user is already logging in, do nothing.
 *      if (!waas || user || isLoggingIn) return;
 *      const provideAuthToken = async (): string => {
 *        // fetch a new auth token from your server.
 *      };
 *      waas.login({ provideAuthToken });
 *    }, [waas, user, isLoggingIn]);
 *    if (isCreatingWallet) {
 *      return <Loading />;
 *    }
 *    if (wallet) {
 *      // do something with the wallet.
 *    }
 *  }
 * ```
 */
export declare function WalletProvider(options: TProviderOptions): JSX.Element;
/**
 * A hook for using an MPC wallet, in a component that is already wrapped in the WalletProvider.
 *
 *
 * @param options See {@link @coinbase/waas-sdk-web#InitializeWaasOptions}
 * @returns The {@link @coinbase/waas-sdk-web#Waas} instance, and a wallet.
 *
 *  This must be used within a {@link WalletProvider}.
 *
 *  e.g
 * ```
 *    <WalletProvider>
 *      <MyComponent />
 *    </WalletProvider>
 *
 *    //...
 *
 *  const MyComponent = () => {
 *     const {wallet, isCreatingWallet} = useWalletContext();
 *     //...
 *  }
 * ```
 *
 */
export declare const useWalletContext: () => TWaasContext;
/**
 * A convenience function to grab the first EVM address (i.e bip32 0/0 soft-derived path).
 * @param wallet The EVM wallet, or undefined -- i.e as returned from `const {wallet} = useWalletContext()`
 * @returns An EVM-ready address, when available.
 *
 * @example
 *
 *  const {wallet} = useWalletContext();
 *  const address = useEVMAddress(wallet);
 */
export declare const useEVMAddress: (wallet: Wallet | undefined) => WaaS.Address<ProtocolFamily> | undefined;
/**
 * Provides the first address on the given protocol family for this wallet.
 *
 * @param wallet The wallet, as returned from {@link useWalletContext}
 * @param protocolFamily The protocol family the address should be usable on. See {@link ProtocolFamily}
 * @returns Returns an {@link Address} when it is ready (undefined while deriving...)
 * @example
 *
 *    const {wallet} = useWalletContext();
 *    const address = useFirstAddress(wallet, ProtocolFamily.EVM);
 *
 */
export declare const useFirstAddress: <TProtocol extends string>(wallet: Wallet | undefined, protocolFamily: TProtocol) => WaaS.Address<TProtocol> | undefined;
