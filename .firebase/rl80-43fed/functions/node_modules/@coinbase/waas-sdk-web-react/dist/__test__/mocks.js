/* eslint-disable require-await */
import { ProtocolFamily, WaasCWS, WaasEndUserAuth, } from "@coinbase/waas-sdk-web";
import { vi } from "vitest";
import { WaaSInit } from "@coinbase/waas-sdk-web/dist/core/reinit";
import { UserType } from "@coinbase/waas-sdk-web/dist/auth/util";
export const MockAddress = {
    protocolFamily: ProtocolFamily.EVM,
    address: "0x123",
    sign: (message) => {
        return Promise.resolve({
            payload: `${message}`,
            signedPayload: `0x123signed`,
            r: `0x123r`,
            s: `0x123s`,
            v: 1,
        });
    },
    exportKey: async (backup, passcode, format) => {
        return {
            keyPath: `/m/44'/60'/0'/0/0`,
            ecKeyPublic: `0x123pub`,
            ecKeyPrivate: `0x123pri`,
        };
    },
    exportKeyFromHostedBackup: async (passcode, format) => {
        return {
            keyPath: `/m/44'/60'/0'/0/0`,
            ecKeyPublic: `0x123pub`,
            ecKeyPrivate: `0x123pri`,
        };
    },
};
export const MockCWSAddress = {
    name: "name",
    // The onchain address (e.g 0xdeadbeef...) for this address.
    address: "0x123",
    // The name of the wallet that this address belongs to.
    wallet: "0xwalletId",
    // The protocol family of the address.
    protocolFamily: "protocolFamilies/evm",
    // The full derivation path that was used to generate this address.
    bip32FullDerivationPath: "bip32Derivation",
    // The key container root ID that this address belongs to.
    keyContainerRootId: "rootId",
    // The key container object ID that this address belongs to.
    keyContainerObjectId: "id",
};
export class MockCWS extends WaasCWS {
    // @ts-ignore
    async generateAddress(...params) {
        return MockCWSAddress;
    }
    // @ts-ignore
    async listAddresses(...params) {
        return {
            addresses: [MockCWSAddress],
            totalSize: 1,
            nextPageToken: "nextPageToken",
        };
    }
    // @ts-ignore
    async getWallet(...params) {
        return {
            wallet: {
                name: "wallet",
                // The key container root ID that this wallet corresponds to.
                // The ID portion of the name also corresponds to this value.
                //
                // Behaviors: REQUIRED
                keyContainerRootId: "kcRootId",
                //
                // Behaviors: OPTIONAL
                reinitializationMetadata: undefined,
            },
            // The Addresses that belong to the parent wallet.
            addresses: [MockCWSAddress],
            nextPageToken: undefined,
        };
    }
}
export class MockEndUserAuth extends WaasEndUserAuth {
    async refreshToken(refreshToken) {
        return Promise.resolve({
            authToken: "refreshed-auth-token",
            refreshToken: "refreshed-refresh-token",
        });
    }
    async logout(authToken) {
        return Promise.resolve();
    }
}
export class MockReinit extends WaaSInit {
    async decryptSessionKey(sessionKeyHex) {
        return "dek";
    }
}
export const MockApi = {
    cws: new MockCWS({ hostname: "123", verbose: true, authToken: "auth-token" }),
    reinit: new MockReinit({ hostname: "123", verbose: true, authToken: "auth-token" }),
    endUserAuth: new MockEndUserAuth({ hostname: "123", verbose: true, authToken: "auth-token" }),
    ops_key: "123",
};
export const MockWallet = {
    backup: "123",
    addresses: {
        for: () => Promise.resolve(MockAddress),
        all: () => Promise.resolve([MockAddress]),
        api: MockApi,
    },
    createAddress: () => Promise.resolve(MockAddress),
    validatePasscode: () => Promise.resolve({
        status: true,
        remainingAttempts: 3,
        message: "test",
        details: "test",
    }),
    changePasscode: (currentPasscode, newPasscode) => Promise.resolve({
        status: true,
        remainingAttempts: 3,
        message: "test",
        details: "test",
    }),
    exportKeys: (backup, passcode, format) => Promise.resolve([
        {
            keyPath: `/m/44'/60'/0'/0/0`,
            ecKeyPublic: `0x123pub`,
            ecKeyPrivate: `0x123pri`,
        },
    ]),
    exportKeysFromHostedBackup: (passcode, format) => Promise.resolve([
        {
            keyPath: `/m/44'/60'/0'/0/0`,
            ecKeyPublic: `0x123pub`,
            ecKeyPrivate: `0x123pri`,
        },
    ]),
};
export const MockUser = {
    id: "123",
    type: UserType.DevDelegatedAuth,
    hasWallet: false,
};
export const MockAuth = {
    login: vi.fn(),
    logout: vi.fn(),
    api: MockApi,
    user: undefined,
};
export const MockWaas = {
    wallets: {
        create: vi.fn(),
        restoreFromBackup: (...params) => Promise.resolve(MockWallet),
        restoreFromHostedBackup: (...params) => Promise.resolve(MockWallet),
        api: MockApi,
        wallet: MockWallet,
    },
    auth: MockAuth,
};
