export declare const steps: {
    finalMarkToStepsMap: Record<string, Record<string, string[]>>;
    startMarkToStepsMap: Record<string, Record<string, boolean>>;
    active: Record<string, boolean>;
    /**
      An internal data structure to represent the state of active steps.
      In this data structure, the keys represent the navgiation index, starting at 0 -
      i.e - the initial app launch it's index 0, the first navigation is index 1 and so one.
      The value of each navigation index is a Set of all the first marks for the currently active steps.
      When a start mark is hit - it will be added to this state.
      When a corresponding end mark is hit, the start mark previously added will be removed from this navigation state
      Examples:
      Example of the state when home is loading:
      {
        [0]: ['start_navigate_to_home_screen'] // load home - empty array since home has loaded
      }
      Example of the state during the navigation from home to assets
      {
        [0]: [] // load home - empty array since home has loaded
        [1]: ['start_navigate_to_trade_screen']
      }
     */
    navigationSteps: Record<number, Record<string, boolean>>;
};
/**
 * This method allows to add new steps by passing the start mark
 */
export declare const addActiveSteps: (startMark: string) => void;
export declare const resetNavigationSteps: () => void;
/**
 * Removes one step from active steps
 */
export declare const removeActiveStep: (step: string) => void;
export declare const resetActiveSteps: () => void;
export declare const resetSteps: () => void;
export declare const getNavigationState: () => Record<number, Record<string, boolean>>;
export declare const getStepsFromNavigation: (navIndex: number) => Record<string, boolean>;
