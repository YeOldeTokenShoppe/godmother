import { M, WP } from '../constants';
import { isPerformanceSupported } from '../isSupported';
import { logData } from '../log';
import { performanceMeasure } from '../measure';
import { metrics } from '../metrics';
import { roundByFour } from '../utils';
import { measureSteps } from './measureSteps';
/**
 * Function which creates a step mark with a name generated
 * from the provided mark when called.
 *
 * The generated mark name has the following format:
 * `mark.${mark}`
 *
 */
export var markStep = function (mark) {
    if (!isPerformanceSupported()) {
        return;
    }
    WP.mark(M + mark);
    measureSteps(mark);
};
// --------------------- TMP Location Before Deprecation -----------------
// For start(), end(), clear()
/**
 * Start performance measurement
 */
export var start = function (markName) {
    if (!isPerformanceSupported() || metrics[markName]) {
        return;
    }
    metrics[markName] = true;
    // Creates a timestamp in the browser's performance entry buffer
    WP.mark("mark_".concat(markName, "_start"));
};
/**
 * End performance measurement
 */
export var end = function (markName, customProperties, doLogData) {
    if (customProperties === void 0) { customProperties = {}; }
    if (doLogData === void 0) { doLogData = true; }
    if (!isPerformanceSupported() || !metrics[markName]) {
        return;
    }
    // End Performance Mark
    WP.mark("mark_".concat(markName, "_end"));
    delete metrics[markName];
    var measure = performanceMeasure(markName);
    if (doLogData) {
        logData(markName, roundByFour(measure), customProperties);
    }
};
/**
 * Removes the named mark from the browser's performance entry buffer.
 */
export var clear = function (markName) {
    delete metrics[markName];
    // Mobile Safari v13 and UC Browser v11
    // don't support clearMarks yet
    if (!WP.clearMarks) {
        return;
    }
    WP.clearMarks("mark_".concat(markName, "_start"));
    WP.clearMarks("mark_".concat(markName, "_end"));
};
//# sourceMappingURL=markStep.js.map