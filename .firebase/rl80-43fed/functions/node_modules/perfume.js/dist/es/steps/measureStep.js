import { M, S, WP } from '../constants';
import { reportPerf } from '../reportPerf';
import { config } from '../config';
import { STEP_THRESHOLDS, getRating } from '../vitalsScore';
export var measureStep = function (step, startMark, endMark) {
    var stepMetricName = S + step;
    var startMarkExists = WP.getEntriesByName(M + startMark).length > 0;
    var endMarkExists = WP.getEntriesByName(M + endMark).length > 0;
    if (!endMarkExists ||
        !startMarkExists ||
        !config.steps ||
        !config.steps[step]) {
        return;
    }
    var _a = STEP_THRESHOLDS[config.steps[step].threshold], maxOutlierThreshold = _a.maxOutlierThreshold, vitalsThresholds = _a.vitalsThresholds;
    var stepMeasure = WP.measure(stepMetricName, M + startMark, M + endMark);
    // checking to ensure stepMeasure is defined - it can be undefined
    // if measure is called on a mark that has already been measured and cleared
    if (!stepMeasure) {
        return;
    }
    var duration = stepMeasure.duration;
    if (duration <= maxOutlierThreshold) {
        var score = getRating(duration, vitalsThresholds);
        // Do not want to measure or log negative metrics
        if (duration >= 0) {
            reportPerf('userJourneyStep', duration, score, { stepName: step }, undefined);
            WP.measure("step.".concat(step, "_vitals_").concat(score), {
                start: stepMeasure.startTime + stepMeasure.duration,
                end: stepMeasure.startTime + stepMeasure.duration,
                detail: {
                    type: 'stepVital',
                    duration: duration,
                },
            });
        }
    }
};
//# sourceMappingURL=measureStep.js.map