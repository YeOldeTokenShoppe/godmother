import { config } from '../config';
import { resetSteps, steps } from './steps';
export var setStepsMap = function () {
    if (!config.steps) {
        return;
    }
    resetSteps();
    Object.entries(config.steps).forEach(function (_a) {
        var _b;
        var _c;
        var step = _a[0], marks = _a[1].marks;
        var startMark = marks[0];
        var endMark = marks[1];
        // getting the current steps associated with the current start mark
        var currentStartMarks = (_c = steps.startMarkToStepsMap[startMark]) !== null && _c !== void 0 ? _c : {};
        currentStartMarks[step] = true;
        steps.startMarkToStepsMap[startMark] = currentStartMarks;
        if (!steps.finalMarkToStepsMap[endMark]) {
            // insert when top level end mark is not present
            steps.finalMarkToStepsMap[endMark] = (_b = {}, _b[startMark] = [step], _b);
        }
        else {
            // insert when end mark and start mark are both present
            var currentSteps = steps.finalMarkToStepsMap[endMark][startMark] || [];
            currentSteps.push(step);
            steps.finalMarkToStepsMap[endMark][startMark] = currentSteps;
        }
    });
};
//# sourceMappingURL=setStepsMap.js.map