"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStepsFromNavigation = exports.getNavigationState = exports.resetSteps = exports.resetActiveSteps = exports.removeActiveStep = exports.resetNavigationSteps = exports.addActiveSteps = exports.steps = void 0;
exports.steps = {
    finalMarkToStepsMap: {},
    startMarkToStepsMap: {},
    active: {},
    /**
      An internal data structure to represent the state of active steps.
      In this data structure, the keys represent the navgiation index, starting at 0 -
      i.e - the initial app launch it's index 0, the first navigation is index 1 and so one.
      The value of each navigation index is a Set of all the first marks for the currently active steps.
      When a start mark is hit - it will be added to this state.
      When a corresponding end mark is hit, the start mark previously added will be removed from this navigation state
      Examples:
      Example of the state when home is loading:
      {
        [0]: ['start_navigate_to_home_screen'] // load home - empty array since home has loaded
      }
      Example of the state during the navigation from home to assets
      {
        [0]: [] // load home - empty array since home has loaded
        [1]: ['start_navigate_to_trade_screen']
      }
     */
    navigationSteps: {},
};
/**
 * This method allows to add new steps by passing the start mark
 */
var addActiveSteps = function (startMark) {
    var _a;
    var newSteps = (_a = exports.steps.startMarkToStepsMap[startMark]) !== null && _a !== void 0 ? _a : [];
    // adding the new steps to the active map
    Object.keys(newSteps).forEach(function (step) {
        if (exports.steps.active[step]) {
            return;
        }
        else {
            exports.steps.active[step] = true;
        }
    });
};
exports.addActiveSteps = addActiveSteps;
var resetNavigationSteps = function () {
    exports.steps.navigationSteps = {};
};
exports.resetNavigationSteps = resetNavigationSteps;
/**
 * Removes one step from active steps
 */
var removeActiveStep = function (step) {
    delete exports.steps.active[step];
};
exports.removeActiveStep = removeActiveStep;
var resetActiveSteps = function () {
    exports.steps.active = {};
};
exports.resetActiveSteps = resetActiveSteps;
var resetSteps = function () {
    // reset all values
    exports.steps.startMarkToStepsMap = {};
    exports.steps.finalMarkToStepsMap = {};
    (0, exports.resetActiveSteps)();
    (0, exports.resetNavigationSteps)();
};
exports.resetSteps = resetSteps;
var getNavigationState = function () { return exports.steps.navigationSteps; };
exports.getNavigationState = getNavigationState;
var getStepsFromNavigation = function (navIndex) {
    var _a;
    var navigationSteps = (0, exports.getNavigationState)();
    return (_a = navigationSteps[navIndex]) !== null && _a !== void 0 ? _a : {};
};
exports.getStepsFromNavigation = getStepsFromNavigation;
//# sourceMappingURL=steps.js.map