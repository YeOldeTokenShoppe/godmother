"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.markNTBT = void 0;
var metrics_1 = require("./metrics");
var log_1 = require("./log");
var vitalsScore_1 = require("./vitalsScore");
var markStep_1 = require("./steps/markStep");
var ntbtTimeoutID = 0;
/**
 * NTBT = Navigation Total Blocking Time
 *
 * This metric measures the amount of time the application may be blocked
 * from processing code during the 2s window after a user navigates
 * from page A to page B.
 *
 * Because this library is navigation agnostic, we have this method
 * to mark when the navigation starts.
 *
 * The NTBT metric is the summation of the blocking time of all long tasks
 * in the 2s window after this method is invoked.
 *
 * If this method is called before the 2s window ends; it will trigger a new
 * NTBT measurement and interrupt the previous one.
 *
 * Credit: Thank you Steven Lam for helping with this!
 */
var markNTBT = function () {
    (0, markStep_1.start)('ntbt');
    // Reset NTBT value
    metrics_1.ntbt.value = 0;
    clearTimeout(ntbtTimeoutID);
    // @ts-ignore
    ntbtTimeoutID = setTimeout(function () {
        (0, markStep_1.end)('ntbt', {}, false);
        (0, log_1.logMetric)({
            attribution: {},
            name: "NTBT",
            rating: (0, vitalsScore_1.getVitalsScore)('NTBT', metrics_1.ntbt.value),
            value: metrics_1.ntbt.value,
        });
        metrics_1.ntbt.value = 0;
    }, 2000);
};
exports.markNTBT = markNTBT;
//# sourceMappingURL=markNTBT.js.map